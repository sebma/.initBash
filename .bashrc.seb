# vim: set ft=sh noet:
unalias which >/dev/null 2>&1
test -z "$initDir" && export initDir=$HOME/.initBash

sebInterpreter=$(ps -o args= $$ | awk '{print gensub("^/.*/","",1,$1)}')
( [ $sebInterpreter = bash ] || [ $sebInterpreter = zsh ] || [ $sebInterpreter = sh ] ) && local=local || local=typeset
unset sebInterpreter

function Echo { tty -s && echo "$@"; }

function Debug { test "$debug" -gt 0 && echo "$bold${colors[blue]}$@$normal"; }

function Source { test "$debug" -gt 0 && time source "$@" && echo || source "$@" ; }
! declare 2>&1 | grep -wq ^colors= && [ $BASH_VERSINFO -ge 4 ] && Source $initDir/.colors
test "$debug" -gt "2" && set -x

Debug "=> Running $(basename ${BASH_SOURCE[0]}) ..."
set -o histexpand # Re-enable the history expansion disabled previously by my "echo" alias

#test -n "$bashRCLoaded" && return
bashRCLoaded=1

echo $OSTYPE | grep -q android && export osFamily=Android || export osFamily=$(uname -s)
[ $osFamily = Linux ] && export osID=$(Source /etc/os-release && echo $ID) osID_LIKE=$(Source /etc/os-release && echo $ID_LIKE)
arch=$(uname -m)

function addmanpaths {
	for manpath
	do
		test ! -d "$manpath" && continue
		echo $MANPATH | \grep -wq "$manpath" || {
			test -z "$MANPATH" && MANPATH=$manpath || MANPATH=$MANPATH:$manpath
		}
	done
	export MANPATH
}
function addpaths {
	for path
	do
		test ! -d "$path" && continue
		echo $PATH | \grep -wq "$path" || PATH=$path:$PATH
	done
	export PATH
}

#echo "=> BEFORE: PATH = $PATH"
systemPathsList="/sbin /usr/sbin /usr/local/sbin /usr/local/go/bin $GOPATH/bin /opt/local/bin /usr/share/fslint/fslint"
userPathsList="$GOPATH/bin $HOME/.opam/system/bin $HOME/perl5/bin $HOME/rvm/bin $HOME/local/sbin $HOME/local/bin $HOME/usr/bin $HOME/usr/local/bin $HOME/gnu/bin $HOME/.local/bin $HOME/shl $HOME/py $HOME/pl $HOME/bin $HOME/php"

addpaths $systemPathsList
addpaths $userPathsList
addpaths $HOME/myScripts/shl $HOME/myScripts/py $HOME/myScripts/pl
addpaths $HOME/.poetry/bin
addpaths $HOME/.linuxbrew/bin /home/linuxbrew/.linuxbrew/bin
addpaths $(\ls -d /usr/local/texlive/*/bin/* 2>/dev/null | egrep "/texlive/[0-9]+/bin/$arch-${osFamily,,}")
#echo "=> AFTER: PATH = $PATH"

manPathsList="/opt/ffmpeg/share/man $HOME/.local/share/man /usr/local/share/man /usr/share/man /usr/local/miniconda3/share/man /usr/local/miniconda2/share/man"
addmanpaths $manPathsList

#Definitions de mes fonctions bash pour Linux
[ -n "$BASH_VERSION" ] && test -r $initDir/.bash_functions && Source $initDir/.bash_functions
test -r $initDir/.bash_functions.seb && Source $initDir/.bash_functions.seb

which lpr >/dev/null 2>&1 && test -f $initDir/.bash_aliases.lpr && Source $initDir/.bash_aliases.lpr
which mpv >/dev/null 2>&1 && test -r $initDir/.bash_aliases.mpv   && Source $initDir/.bash_aliases.mpv
which ffmpeg >/dev/null 2>&1 && test -r $initDir/.bash_aliases.AV   && Source $initDir/.bash_aliases.AV

which mpv >/dev/null 2>&1 && test -r $initDir/.bash_functions.mpv && Source $initDir/.bash_functions.mpv
which youtube-dl >/dev/null 2>&1 && test -r $initDir/.bash_aliases.ytdl && Source $initDir/.bash_aliases.ytdl
which youtube-dl >/dev/null 2>&1 && test -r $initDir/.bash_functions.ytdl && Source $initDir/.bash_functions.ytdl

test -r ~/.config/.bcrc && export BC_ENV_ARGS="-l $HOME/.config/.bcrc"

#Export de toutes les fonctions sauf celles dont le nom commence par "_"
#export -f $(declare -F | egrep -v " __?" | awk '{print$NF}')

user=$(\id -un)
hostname=$HOSTNAME

test -r $initDir/.bashrc.$osID && Source $initDir/.bashrc.$osID # Pour les OS derives de $osFamily

test -r $initDir/.colors && Source $initDir/.colors
#PROMPT_COMMAND='echo -ne "\033]0;$USER : $hostname @ $domain / $system : $(date +"%A %d %B %Y %H:%M") $PWD\007"'
PS1="$user : $blink${colors[red]}$hostname$normal @ $bold${colors[blue]}$domain / $italics${colors[green]}$system : $bold${colors[blue]}\w$normal
 "

jupyterRuntimeDIR=$(jupyter --runtime-dir 2>/dev/null)
if [ -n "$jupyterRuntimeDIR" ]
then
	\pgrep -f jupyter-notebook >/dev/null 2>&1 && \mkdir -pv $jupyterRuntimeDIR

	if [ -d $jupyterRuntimeDIR ]
	then
		test -k $jupyterRuntimeDIR || \chmod -v +t $jupyterRuntimeDIR # See : https://github.com/jupyter/notebook/issues/3718
	fi
fi

\mkdir -pvm 700 ~/.ssh/sockets/

env | grep -q SSH_CLIENT && which pax11publish >/dev/null 2>&1 && pax11publish -r

if tty -s #Si c'est une session interactive
then
	trap 'echo "=> Ignoring this step and continuing the script <$(basename $BASH_SOURCE)> ..." >&2' INT
	if which aplay >/dev/null 2>&1 && LANG=C timeout 5 aplay -l 2>/dev/null | grep -wq "card"
	then
		audioCardNumber=$(LANG=C aplay -l 2>/dev/null | grep -wv HDMI | awk -F "[ :]" '/^card/{number=$2;exit}END{print number}')
#		test $audioCardNumber && amixer -q -c $audioCardNumber -- sset Master 100%
	fi
	trap - INT

	echo
	which randverse >/dev/null 2>&1 && randverse && echo
fi

if which xdg-mime >/dev/null && [ $osID != sailfishos ]
then
	xdg-mime query default application/pdf | grep -wq evince.desktop || xdg-mime default evince.desktop application/pdf
fi

#test -f ~/.rvm/scripts/rvm && Source ~/.rvm/scripts/rvm

if which pdflatex >/dev/null 2>&1
then
	grep -qw pdflatex= $HOME/.pdfnup.conf || echo pdflatex=$(which pdflatex) >> $HOME/.pdfnup.conf
fi

tty -s && which ssh-add >/dev/null && {
	if ! ssh-add -l 2>/dev/null | grep -q "$UPMC_ID"
	then
		if test -s ~/.ssh/.$UPMC_ID; then
			if ! env | grep -q SSH_CLIENT; then # Si on est PAS a l autre bout d une connection ssh
				trap 'echo "=> Ignoring this step and continuing the script <$(basename $BASH_SOURCE)> ..." >&2' INT
				Echo "=> Loading my ssh key from <$(basename $BASH_SOURCE)> ..."
				tty | egrep -q "tty[0-9]+$" && set -x
				ssh-add ~/.ssh/.$UPMC_ID >/dev/null && Echo "=> ssh key successfully loaded." >&2 || Echo "=> Failed loading ssh key." >&2
				set +x
				trap - INT
			fi
		fi
	fi
}
cd

if test -r /usr/share/bash-completion/bash_completion 
then
	Debug "=> Running /usr/share/bash-completion/bash_completion ..."
	set -o | grep -q xtrace.*on && xtrace="set -o xtrace"
	set +x
	Source /usr/share/bash-completion/bash_completion
	$xtrace
	Debug "=> Running /usr/share/bash-completion/bash_completion ..."
fi

which register-python-argcomplete >/dev/null 2>&1 && eval "$(register-python-argcomplete conda)"

#[[ -s "$HOME/.rvm/scripts/rvm" ]] && Source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

tty -s && date && echo
Echo "=> The cups admin console is http://localhost:631/admin"

which brew >/dev/null 2>&1 && test -r $initDir/.bashrc.brew && Source $initDir/.bashrc.brew
which brew >/dev/null 2>&1 && test -r $initDir/.bash_aliases.brew && Source $initDir/.bash_aliases.brew
which brew >/dev/null 2>&1 && test -r $initDir/.bash_functions.brew && Source $initDir/.bash_functions.brew
which conda >/dev/null 2>&1 && test -r $initDir/.bashrc.conda && Source $initDir/.bashrc.conda
which adb >/dev/null 2>&1 && test -r $initDir/.bash_aliases.adb && Source $initDir/.bash_aliases.adb
which adb >/dev/null 2>&1 && test -r $initDir/.bash_functions.adb && Source $initDir/.bash_functions.adb
which getprop >/dev/null 2>&1 && test -r $initDir/.bash_aliases.getprop && Source $initDir/.bash_aliases.getprop

test -r $initDir/.bashrc.$osFamily && Source $initDir/.bashrc.$osFamily
#test -r $initDir/.bashrc.$osFamily.$HOSTNAME && Source $initDir/.bashrc.$osFamily.$HOSTNAME
test -r $initDir/.bashrc.$osID_LIKE && Source $initDir/.bashrc.$osID_LIKE # Si c'est un Linux de type Debian ou Redhat

#my git configuration
if which git >/dev/null 2>&1; then
	test -r $initDir/.bashrc.git && Source $initDir/.bashrc.git
	test -r $initDir/.bash_aliases.git && Source $initDir/.bash_aliases.git
	test -r $initDir/.bash_functions.git && Source $initDir/.bash_functions.git
fi

test -f $initDir/.bashrc.gpu && Source $initDir/.bashrc.gpu

#Definitions de mes alias
test -r $initDir/.bash_aliases && Source $initDir/.bash_aliases
test -r $initDir/.bash_aliases.$osFamily && Source $initDir/.bash_aliases.$osFamily #Pour Darwin ou Linux ou Android
test -r $initDir/.bash_aliases.$osID && Source $initDir/.bash_aliases.$osID # Pour les OS derives de $osFamily

which qemu-system-$arch >/dev/null 2>&1 && test -r $initDir/.bash_aliases.qemu && Source $initDir/.bash_aliases.qemu

test -r $initDir/.bash_functions.$osFamily && Source $initDir/.bash_functions.$osFamily #Pour Darwin ou Linux ou Android
test -r $initDir/.bash_functions.$osID && Source $initDir/.bash_functions.$osID # Pour les OS derives de $osFamily
case $OSTYPE in
	linux-gnueabi)
		which resize >/dev/null && resize
		which busybox >/dev/null && test -r $initDir/.bash_aliases.busybox && Source $initDir/.bash_aliases.busybox
		which toybox >/dev/null && test -r $initDir/.bash_aliases.toybox && Source $initDir/.bash_aliases.toybox
		;;
esac

if [ $osFamily = Linux ];then
	groups | \egrep -wq "adm|admin|sudo|wheel" && export GOBIN=/usr/local/bin || export GOBIN=~/go/bin
elif [ $osFamily = Darwin ];then
	export GOBIN=/usr/local/bin
fi

# Disable aliases for tools that are not found in $PATH
[ $osFamily = Linux ]  && sed="$(which sed) -r"
[ $osFamily = Darwin ] && sed="$(which sed) -E"
#for tool in curl ffmpeg ffprobe hexdump hw-probe lsb_release vim;do ! which $tool >/dev/null 2>&1 && alias | grep -q $tool && unalias $tool;done
alias | $sed "s/alias //;s/=[']\w+=\S+ /=/;s/sudo -?\w? //;s/(command|time) //;s/[$]\(which (\w+)\)/\1/;s/\/\S+\///;s/='?\\\?/ /" | awk '!/^[.]+/{print$1" "$2}' | sort -u | Pgrep -v '\s?-|^$' | while read aliasName tool
do
#	echo "$tool" | grep -q -- "^-" && echo "=> aliasName = <$aliasName> tool = <$tool>" && continue
	! which $tool >/dev/null 2>&1 && alias | grep -q $tool && unalias $aliasName #Does not work on Jolla1/SFOS3
	set +x
done

quoteCHAR="'\''"

set +x
tty -s && echo
Debug "=> END of $(basename ${BASH_SOURCE[0]})"
