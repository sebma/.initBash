# vim: set syn=sh noet:
unalias which >/dev/null 2>&1
test -z "$initDir" && export initDir=$HOME/.initBash

declare -A | grep -wq colors || source $initDir/.colors
function Debug { test "$debug" '>' 0 && echo "$bold${colors[blue]}$@$normal"; }
Debug "=> Running $(basename ${BASH_SOURCE[0]}) ..."

function Source { test "$debug" '>' 0 && time source "$@" && echo || source "$@" ; }
test "$debug" '>' "2" && set -x

set -o histexpand # Re-enable the history expansion disabled previously by my "echo" alias

#test -n "$bashRCLoaded" && return
bashRCLoaded=1
export os=$(uname -s)
function addpath {
	test ! -d "$1" && return
	echo $PATH | grep -wq "$1" || PATH=$1:$PATH
}
function addmanpath {
	test ! -d "$1" && return
	echo $MANPATH | grep -wq "$1" || {
		test -z "$MANPATH" && MANPATH=$1 || MANPATH=$MANPATH:$1
	}
}

pathsList="/sbin /usr/local/sbin /usr/local/go/bin /usr/local/miniconda2/bin /usr/local/miniconda3/bin /opt/local/bin /usr/share/fslint/fslint $HOME/.opam/system/bin $HOME/perl5/bin $HOME/rvm/bin $HOME/homebrew/bin $HOME/local/sbin $HOME/local/bin $HOME/usr/bin $HOME/usr/local/bin $HOME/gnu/bin $HOME/.local/bin $HOME/shl $HOME/py $HOME/pl $HOME/bin $HOME/php $HOME/.linuxbrew/bin ~linuxbrew/.linuxbrew/bin $HOME/miniconda2/bin $HOME/miniconda3/bin $HOME/myScripts/shl $HOME/myScripts/py $HOME/myScripts/pl"
for path in $pathsList
do
	addpath $path
done
export PATH

manPathsList="/opt/ffmpeg/share/man $HOME/.local/share/man /usr/local/share/man /usr/share/man"
for manpath in $manPathsList
do
  addmanpath $manpath
done
export MANPATH

#Definitions de mes fonctions bash pour Linux
[ -n "$BASH_VERSION" ] && test -r $initDir/.bash_functions && Source $initDir/.bash_functions
which mpv >/dev/null 2>&1 && test -r $initDir/.bash_functions.mpv && Source $initDir/.bash_functions.mpv
#Export de toutes les fonctions sauf celles dont le nom commence par "_"
export -f $(declare -F | egrep -v " __?" | awk '{print$NF}')

test -r $initDir/.colors && Source $initDir/.colors
user=$(\id -un)
#PROMPT_COMMAND='echo -ne "\033]0;$USER : $HOSTNAME @ $domain / $system : $(date +"%A %d %B %Y %H:%M") $PWD\007"'
PS1="$user : $blink${colors[red]}$HOSTNAME$normal @ $bold${colors[blue]}$domain / $italics${colors[green]}$system : $bold${colors[blue]}\w$normal
 "

jupyterRuntimeDIR=$(jupyter --runtime-dir 2>/dev/null)
if [ -n "$jupyterRuntimeDIR" ]
then
	\pgrep -f jupyter-notebook >/dev/null 2>&1 && \mkdir -pv $jupyterRuntimeDIR

	if [ -d $jupyterRuntimeDIR ]
	then
		test -k $jupyterRuntimeDIR || \chmod -v +t $jupyterRuntimeDIR # See : https://github.com/jupyter/notebook/issues/3718
	fi
fi

\mkdir -pvm 700 ~/.ssh/sockets/

if tty -s #Si c'est une session interactive
then
	trap 'echo "=> Ignoring this step and continuing the script <$(basename $BASH_SOURCE)> ..." >&2' INT

	if which aplay >/dev/null 2>&1 && LANG=C timeout 5 aplay -l 2>/dev/null | grep -wq "card"
	then
		audioCardNumber=$(LANG=C aplay -l 2>/dev/null | grep -wv HDMI | awk -F "[ :]" '/^card/{number=$2;exit}END{print number}')
#		test $audioCardNumber && amixer -q -c $audioCardNumber -- sset Master 100%
	fi
	trap - INT
	echo
	which randverse >/dev/null 2>&1 && randverse && echo
fi

if which xdg-mime >/dev/null 
then
	xdg-mime query default application/pdf | grep -wq evince.desktop || xdg-mime default evince.desktop application/pdf
fi

#test -f ~/.rvm/scripts/rvm && Source ~/.rvm/scripts/rvm

if which pdflatex >/dev/null
then
	grep -qw pdflatex= $HOME/.pdfnup.conf || echo pdflatex=$(which pdflatex) >> $HOME/.pdfnup.conf
fi

which ssh-add >/dev/null && {
	trap 'echo "=> Ignoring this step and continuing the script <$(basename $BASH_SOURCE)> ..." >&2' INT
	if ! ssh-add -l 2>/dev/null | grep -q "$UPMC_ID"
	then
		if test -s ~/.ssh/.$UPMC_ID; then
			tty -s && echo "=> Starting ssh-add from <$(basename $BASH_SOURCE)> ..." 
			ssh-add ~/.ssh/.$UPMC_ID >/dev/null
		fi
	fi
	trap - INT
}
cd

if test -r /usr/share/bash-completion/bash_completion 
then
	Debug "=> Running /usr/share/bash-completion/bash_completion ..."
	Source /usr/share/bash-completion/bash_completion
	Debug "=> Running /usr/share/bash-completion/bash_completion ..."
fi

which register-python-argcomplete >/dev/null 2>&1 && eval "$(register-python-argcomplete conda)"

#[[ -s "$HOME/.rvm/scripts/rvm" ]] && Source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

if tty -s #Si c'est une session interactive
then
	date;echo
	echo "=> The cups admin console is http://localhost:631/admin"
fi

which brew >/dev/null 2>&1 && Source $initDir/.bashrc.brew
test -r $initDir/.bashrc.conda && Source $initDir/.bashrc.conda
test -r $initDir/.bashrc.$os && Source $initDir/.bashrc.$os
test -r $initDir/.bashrc.$os.local && Source $initDir/.bashrc.$os.local
test -s /etc/debian_version && Source $initDir/.bashrc.Debian

#my git configuration
which git >/dev/null 2>&1 && test -f $initDir/.bashrc.git && Source $initDir/.bashrc.git

test -f $initDir/.bashrc.gpu && Source $initDir/.bashrc.gpu

#Definitions de mes alias
test -r $initDir/.bash_aliases && Source $initDir/.bash_aliases
test -r $initDir/.bash_aliases.$os && Source $initDir/.bash_aliases.$os #Pour Darwin ou Linux
test -r $initDir/.bash_functions.$os && Source $initDir/.bash_functions.$os #Pour Darwin ou Linux
case $OSTYPE in
	linux-gnueabihf) grep -q ID=sailfishos /etc/os-release &&  test -r $initDir/.bash_aliases.SailfishOS && Source $initDir/.bash_aliases.SailfishOS;;
	linux-gnueabi) resize; test -r $initDir/.bash_aliases.android && Source $initDir/.bash_aliases.android; which busybox >/dev/null && test -r $initDir/.bash_aliases.busybox && Source $initDir/.bash_aliases.busybox;;
esac

set +x
tty -s && echo
Debug "=> END of $(basename ${BASH_SOURCE[0]})"
