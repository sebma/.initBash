# vim: set syn=sh noet
#test -n "$bashRCLoaded" && return
bashRCLoaded=1
function addpath {
  test ! -d "$1" && return
  echo $PATH | grep -wq "$1" || PATH=$PATH:$1
}
function addmanpath {
  test ! -d "$1" && return
  echo $MANPATH | grep -wq "$1" || MANPATH=$MANPATH:$1
}

pathsList="/sbin /usr/local/sbin /cal/softs/bin /usr/local/go/bin /usr/local/miniconda2/bin /usr/local/miniconda3/bin /opt/local/bin /usr/share/fslint/fslint ~/perl5/bin ~/.rvm/bin $HOME/usr/bin $HOME/usr/local/bin $HOME/gnu/bin $HOME/.local/bin $HOME/shl $HOME/py $HOME/pl $HOME/bin $HOME/php $HOME/.linuxbrew/bin $HOME/../linuxbrew/.linuxbrew/bin $HOME/miniconda2/bin"
for path in $pathsList
do
  addpath $path
done
export PATH

manPathsList="/opt/ffmpeg/share/man"
for manpath in $manPathsList
do
  addmanpath $manpath
done
export MANPATH

#Definitions de mes fonctions bash pour Linux
[ -n "$BASH_VERSION" ] && test -r $initDir/.bash_functions && source $initDir/.bash_functions
#Definitions de mes alias
test -r $initDir/.bash_aliases && source $initDir/.bash_aliases
test -r $initDir/.bash_aliases.admin && groups 2>/dev/null | egrep -wq "sudo|admin" && source $initDir/.bash_aliases.admin
test -r $initDir/.bash_aliases.$(uname -s) && source $initDir/.bash_aliases.$(uname -s)
case $OSTYPE in
	linux-gnueabihf) grep -q ID=sailfishos /etc/os-release &&  test -r $initDir/.bash_aliases.SailfishOS && source $initDir/.bash_aliases.SailfishOS;;
	linux-gnueabi) resize; test -r $initDir/.bash_aliases.android && source $initDir/.bash_aliases.android; which busybox >/dev/null && test -r $initDir/.bash_aliases.busybox && source $initDir/.bash_aliases.busybox;;
esac

#Export de toutes les fonctions sauf celles dont le nom commence par "_"
export -f $(declare -F | egrep -v " __?" | awk '{print$NF}')

test -r $initDir/.colors && source $initDir/.colors
user=$(id | awk -F"[()]" '/uid/{print$2}')
PS1="$bold${color[blue]}$user : $blink${color[red]}$HOSTNAME$blinkOff @ $bold${color[blue]}$domain / $italics${color[green]}$system$normal : $bold${color[blue]}\w$normal
 "
PROMPT_COMMAND='echo -ne "\033]0;$USER : $HOSTNAME @ $domain / $system : $(date +"%A %d %B %Y %H:%M") $PWD\007"'

if tty -s #Si c'est une session interactive
then
	if which aplay >/dev/null 2>&1 && LANG=C aplay -l 2>/dev/null | grep -wq "card"
	then
		audioCardNumber=$(LANG=C aplay -l 2>/dev/null | grep -wv HDMI | awk -F "[ :]" '/^card/{number=$2;exit}END{print number}')
#		test $audioCardNumber && amixer -q -c $audioCardNumber -- sset Master 100%
	fi
	echo
	which randverse >/dev/null 2>&1 && randverse && echo
fi

if which xdg-mime >/dev/null 
then
	xdg-mime query default application/pdf | grep -wq evince.desktop || xdg-mime default evince.desktop application/pdf
fi

#test -f ~/.rvm/scripts/rvm && source ~/.rvm/scripts/rvm
which lpstat >/dev/null 2>&1 && defaultPrinter=$(LANG=C lpstat -a 2>/dev/null | awk '/accepting/{print$1}') || defaultPrinter=""
if which lpstat >/dev/null 2>&1 && lpstat -p 2>/dev/null | grep -q printer 
then
	lpoptions -o media=A4 -o fit-to-page -o Duplex=DuplexNoTumble -o sides=two-sided-long-edge -o page-border=single -o prettyprint -o StapleLocation=UpperLeft
	export colorPrinter="$(lpstat -a | awk '/[Cc](olor|ouleur)/{print$1;exit}')"
	test $colorPrinter && lpoptions -p $colorPrinter -o media=A4 -o fit-to-page -o Duplex=DuplexNoTumble -o sides=two-sided-long-edge -o page-border=single -o prettyprint -o StapleLocation=UpperLeft
fi

#lpoptions -p $defaultPrinter/Duplex2PagesPerSheet -o media=A4 -o fit-to-page -o Duplex=DuplexNoTumble -o sides=two-sided-long-edge -o page-border=double -o number-up=2 -o number-up-layout=btlr  -o page-border=single -o prettyprint
#lpoptions -p $defaultPrinter/Duplex4PagesPerSheet -o media=A4 -o fit-to-page -o Duplex=DuplexNoTumble -o sides=two-sided-long-edge -o page-border=double -o number-up=4 -o page-border=single -o prettyprint

if which pdflatex >/dev/null
then
	grep -qw pdflatex= $HOME/.pdfnup.conf || echo pdflatex=$(which pdflatex) >> $HOME/.pdfnup.conf
fi

which ssh-add >/dev/null && {
	trap 'echo "=> Ignoring this step and continuing the script <$(basename $BASH_SOURCE)> ..." >&2' INT
	if ! ssh-add -l 2>/dev/null | grep -q "$UPMC_ID"
	then
		test -s ~/.ssh/.$UPMC_ID && echo "=> Starting ssh-add from <$(basename $BASH_SOURCE)> ..." && ssh-add ~/.ssh/.$UPMC_ID 2>/dev/null
	fi
	trap - INT
}
cd

test -r /usr/share/bash-completion/bash_completion && source /usr/share/bash-completion/bash_completion
test -x "$(which brew)" && [ $BASH_VERSINFO -ge 4 ] && [ -r $(brew --prefix)/share/bash-completion/bash_completion ] && source $(brew --prefix)/share/bash-completion/bash_completion
which register-python-argcomplete >/dev/null 2>&1 && eval "$(register-python-argcomplete conda)"

#[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
date
test -r $initDir/.bashrc.conda && source $initDir/.bashrc.conda
