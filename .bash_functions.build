# vim: set ft=sh noet:
! declare 2>&1 | grep -wq ^colors= && [ $BASH_VERSINFO -ge 4 ] && source $initDir/.colors
test "$debug" -gt 0 && echo "=> Running $bold${colors[blue]}$(basename ${BASH_SOURCE[0]})$normal ..."

test "$debug" -gt 0 && Echo "\n=> \${BASH_SOURCE[*]} = ${BASH_SOURCE[*]}\n"

which nproc >/dev/null 2>&1 && nproc=$(nproc) || nproc=$(getconf _NPROCESSORS_ONLN)
myMakeOptions="-j$nproc"
test "$make" || { which remake >/dev/null 2>&1 && export make="$(type -P remake) $myMakeOptions" || export make="$(type -P make) $myMakeOptions"; }
test "$install" || { which checkinstall >/dev/null 2>&1 && export install="$(type -P checkinstall)" || export install="make install"; }

function buildSourceCode {
	local basicCompiler=$(which $(echo $HOSTTYPE-$OSTYPE-gcc | sed "s/armv[^-]*-/arm-/"))
	test $CC || [ -z "$basicCompiler" ] || export CC=$(\ls ${basicCompiler}-? | awk -F/ 'END{print$NF}')
	local host=$(echo "$@" | grep -oP -- "--host=\K\S+")
	local defaultBuildOptions=""
	local returnCode=0
	local project=$(basename $PWD)
	[ -s Makefile ] || [ -s makefile ] || [ -s GNUmakefile ] || configure $defaultBuildOptions "$@"
	returnCode=$?

	if [ $returnCode = 0 ] && ( [ -s Makefile ] || [ -s makefile ] || [ -s GNUmakefile ] )
	then
		echo "=> make ..."
		if make
		then
			test -n "$CC" && echo "=> CC = $CC"
			if [ -z "$host" ] # if building for this host then install
			then
				returnCode=$?
				if groups | \egrep -wq "sudo|adm|root"
				then
					if which checkinstall >/dev/null
					then
						if git rev-parse --git-dir >/dev/null 2>&1;then
							checkinstallWithGitRepoInformation
						else
							echo "=> sudo checkinstall ..."
							sudo checkinstall
						fi
					else
						echo "=> sudo $make install ..."
						sudo $make install
					fi
					returnCode=$?
				else
					echo "=> make install ..."
					make install
					returnCode=$?
				fi
			fi
		else
			returnCode=$?
		fi
	else
		returnCode=$?
		printf "=> ERROR: The Makefile could not be generated therefore the building the <$project> source code has failed !\n=> Listing the files :\n$(ls -l)\n" >&2
	fi

	echo "=> returnCode = $returnCode" >&2
	[ $returnCode = 0 ] && [ -z "$host" ] && set -x && sudo ldconfig
	set +x
	test -n "$CC" && echo "=> CC = $CC"
	export -n CC
	return $returnCode
}
function checkinstallWithGitRepoInformation {
	[ $osFamily = Darwin ] && local sed="$(which sed) -E"
	[ $osFamily = Linux ]  && local sed="$(which sed) -r"
	local gitHTTP_URL=$(\git config --get remote.origin.url | $sed "s|^git@|https://|;s|(\.\w+):|\1/|")

	echo "=> Running $FUNCNAME ..."
	printf "=> Project description is :"
#	\curl -qs $gitHTTP_URL | \pup --charset utf8 "title text{}" | cut -d: -f2-
	xidel -s -e //title $gitHTTP_URL | cut -d: -f2-
	echo

	local pkgname=$(basename -s .git $gitHTTP_URL)
	local pkgversion=$(\git describe --tags --abbrev=0 | $sed "s/^v|^[Vv]ersion//g;")
	local pkgsource=$gitHTTP_URL
	set -x
	sudo checkinstall --pkgname $pkgname --pkgversion $pkgversion --pkgsource=$pkgsource
	set +x
}
function buildSourceCodeForAndroid {
	local dest=arm-linux-androideabi
	test $CC || export CC=$dest-gcc
	local defaultBuildOptions="--prefix=$HOME/build/android --host=$dest --build=$MACHTYPE"
	local returnCode=0
	buildSourceCode $defaultBuildOptions "$@"
	return $?
}
function buildSourceCodeForJolla {
	local dest=arm-linux-gnueabihf
	test $CC || export CC=$dest-gcc
	local defaultBuildOptions="--prefix=$HOME/build/jolla --host=$dest"
	local returnCode=0
	buildSourceCode $defaultBuildOptions "$@"
	return $?
}
function build_in_HOME {
	test -s configure || time ./bootstrap.sh || time ./bootstrap || time ./autogen.sh
	test -s Makefile || time ./configure --prefix=$HOME/gnu --sysconfdir=$HOME/gnu $@
	test -s Makefile && time $make && $make install
	test -s GNUmakefile && time $make && $make install
}
function build_in_usr {
	test -s configure || time ./bootstrap.sh || time ./bootstrap || time ./autogen.sh
	test -s Makefile || time ./configure --prefix=/usr --sysconfdir=/etc $@
	test -s Makefile && time $make && sudo $make install
	test -s GNUmakefile && time $make && sudo $make install
}
function build_in_usr_DEBIAN {
	test -s configure || time ./bootstrap.sh || time ./bootstrap || time ./autogen.sh
	test -s Makefile || time ./configure --prefix=/usr --sysconfdir=/etc $@
	test -s Makefile && time $make && sudo $make install
	test -s GNUmakefile && time $make && sudo checkinstall
}
function build_in_usr_local {
	test -s configure || time ./bootstrap.sh || time ./bootstrap || time ./autogen.sh
	test -s Makefile || time ./configure --prefix=/usr/local $@
	test -s Makefile && time $make && sudo $make install
	test -s GNUmakefile && time $make && sudo $make install
}
function build_in_usr_local_DEBIAN {
	test -s configure || time ./bootstrap.sh || time ./bootstrap || time ./autogen.sh
	test -s Makefile || time ./configure --prefix=/usr/local $@
	test -s Makefile && time $make && sudo checkinstall
	test -s GNUmakefile && time $make && sudo checkinstall
}
function configure {
	local basicCompiler=$(which $(echo $HOSTTYPE-$OSTYPE-gcc | sed "s/armv[^-]*-/arm-/"))
	test $CC || [ -z "$basicCompiler" ] || export CC=$(\ls ${basicCompiler}-? | awk -F/ 'END{print$NF}')
	local defaultBuildOptions=""
	local project=$(basename $PWD)
	local returnCode=0

	./configure --help | \grep -q -- "--enable-shared" && defaultBuildOptions="--enable-shared"

	test "$1" = "-h" && {
		echo "=> Usage: $FUNCNAME [--prefix=/installation/path] [./configure arguments ...]" >&2
		return 1
	}
	if [ $# = 0 ] || ! echo "$@" | \grep -q -- "--prefix="
	then
		if groups | \egrep -wq "sudo|adm|root"
		then
			prefix=/usr/local
		elif grep -wq GNU README* COPYING
		then
			prefix=$HOME/gnu
			mkdir -p $prefix
		else
			prefix=$HOME/local
			mkdir -p $prefix
		fi
	else
		for arg in $@;do echo $arg | \grep -q -- --prefix= && prefix=${arg/*=/};done
		prefix=$(echo $prefix | sed 's/~/$HOME/') #Configure ne supporte parfois pas les chemins contenant '~'
		mkdir -p $prefix
		shift
	fi
	configureArgs="--prefix=$prefix --exec-prefix=$prefix $defaultBuildOptions $@"
	echo "=> pwd = $PWD"
	echo "=> prefix = $prefix"
	\grep -w url ./.git/config && which git >/dev/null 2>&1 && git pull
	if [ -f CMakeLists.txt ]
	then
		mkdir -p build
		cd build
		if groups | \egrep -wq "sudo|adm|root" && echo $prefix | grep -q /usr
		then
			unset CC
			echo "=> cmake .. $@"
			cmake .. $@
		else
			unset CC
			echo "=> cmake .. -DPREFIX=$prefix -DEPREFIX=$prefix $@ ..."
			cmake .. -DPREFIX=$prefix -DEPREFIX=$prefix $@
		fi
		returnCode=$?
		grep ":PATH=.*$prefix" CMakeCache.txt
		test $returnCode != 0 && cd ../ # You need to be in the parent directory to re-run the "buildSourceCode" function
	else
		if [ ! -s configure ]
		then
#			test -s ./bootstrap.sh && time ./bootstrap.sh || { test -s ./bootstrap && time ./bootstrap || test -s ./autogen.sh && time ./autogen.sh; }
			for autoconfProg in bootstrap.py bootstrap.sh bootstrap autogen.sh build.sh
			do	
				if test -x $autoconfProg
				then
					set -x
					time ./$autoconfProg $configureArgs || time ./$autoconfProg
					returnCode=$?
					set +x
					break
				fi
			done
			set -x
			if [ $returnCode = 0 ]
			then
				if [ -x ./waf ]
				then
					./waf configure
				else
					test -x ./configure || time autoreconf -vim || time autoreconf -vimf
				fi
				returnCode=$?
			fi
			set +x
		fi
		if [ ! -s Makefile ]
		then
			test -s ./configure && set -x && time ./configure $configureArgs
			returnCode=$?;set +x
		fi
	fi
	echo "=> returnCode = $returnCode" >&2
	return $returnCode
}
function configureForAndroid {
	local dest=arm-linux-androideabi
	test $CC || export CC=$dest-gcc
	local defaultBuildOptions="--prefix=$HOME/build/android --host=$dest --build=$MACHTYPE"
	local returnCode=0
	configure $defaultBuildOptions "$@"
	return $?
}
function configureForJolla {
	local dest=arm-linux-gnueabihf
	test $CC || export CC=$dest-gcc
	local defaultBuildOptions="--prefix=$HOME/build/jolla --host=$dest"
	local returnCode=0
	configure $defaultBuildOptions "$@"
	return $?
}
function make {
	if [ -s Makefile ] || [ -s makefile ] || [ -s GNUmakefile ]
	then
		time CFLAGS="-g" $make $@
	else
		\mkdir ../bin 2>/dev/null
		if which gcc >/dev/null 2>&1
		then
			for file
			do
				echo gcc -ggdb $file.c -o ../bin/$file
				time command gcc -ggdb $file.c -o ../bin/$file
			done
		else
			for file
			do
				echo cc -g $file.c -o ../bin/$file
				time command cc -g $file.c -o ../bin/$file
			done
		fi
	fi
}
function pipInstallFromDIR {
	local dir=${1:-../$(basename $PWD)} # Set dir to current directory by default
	local -r isAdmin=$(groups 2>/dev/null | egrep -wq "sudo|adm|admin|root" && echo true || echo false)
	local sudo="command sudo"

	if $isAdmin
	then
		set -x
		$sudo -H pip install $dir
	else
		set -x
		pip install --user $dir
	fi
	set +x
}

set +x
test "$debug" -gt 0 && echo "=> END of $bold${colors[blue]}$(basename ${BASH_SOURCE[0]})$normal"
