# vim: set ft=sh noet:
! declare 2>&1 | grep -wq ^colors= && [ $BASH_VERSINFO -ge 4 ] && source $initDir/.colors
test "$debug" -gt 0 && echo "=> Running $bold${colors[blue]}$(basename ${BASH_SOURCE[0]})$normal ..."

export myGitHubUser=sebma
function gitClone {
	local repoURL=$1
	local owner=""
	if test $# = 1;then
		owner=$(basename $(dirname $repoURL) | cut -d: -f2)
		project=$(basename $repoURL .git)
		mkdir -p $owner && cd $owner 
		if git clone $repoURL && cd $project;then
			# Commande a recopier manuellement pour autres les depos. dont la pushurl n'est pas configuree
			git config remote.origin.pushurl git@github.com:$myGitHubUser/${PWD/*\/}
			printf "=> remote.origin.pushurl = "
			git config remote.origin.pushurl
		fi
	fi
}
function gitCloneHome {
	test $# -ge 1 && gitCloneNonEmptyDir $@ $HOME
}
function gitCloneNonEmptyDir {
	test $# != 1 && [ $# != 2 ] && {
		echo "=> Usage: $FUNCNAME url [dir=.]" >&2
		return 1
	}

	local url="$1"
	local dir="$2"
	test $dir || dir=.
	test $url && {
		git init "$dir"
		git remote | grep -q origin || git remote add origin "$url"
		git fetch
		git pull origin master
		git branch --set-upstream-to=origin/master master
	}
}
function gitUpdateAllMyLocalRepos {
	local find="command find"
	[ $osFamily = Darwin ] && find=gfind
	local dir=""
	$find ~ -maxdepth 2 -type d -name .git 2>/dev/null | \egrep -v "/.linuxbrew/" | sort | while read dir
	do
		cd $dir/..
		echo "=> Updating <$dir> local repo. ..." >&2
		git config --local remote.origin.url
		git pull
		cd - >/dev/null
		echo
	done
	unset dir
}

set +x
test "$debug" -gt 0 && echo "=> END of $bold${colors[blue]}$(basename ${BASH_SOURCE[0]})$normal"
