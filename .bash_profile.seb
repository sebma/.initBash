# vim: set ft=sh noet:
[ $BASH_VERSINFO = 3 ] && [ -x ~/usr/local/bin/bash ] && exec ~/usr/local/bin/bash -l
test -z "$initDir" && export initDir=$HOME/.initBash
! declare 2>&1 | grep -wq ^colors= && [ $BASH_VERSINFO -ge 4 ] && source $initDir/.colors
test "$debug" -gt 0 && tty -s && echo "=> Running $bold${colors[blue]}$(basename ${BASH_SOURCE[0]})$normal ..."

if tty -s;then function Echo { echo -e "$@"; } else function Echo { : ; } fi

echo $OSTYPE | grep -q android && export osFamily=Android || export osFamily=$(uname -s)

function SourceProfile { test "$debug" -gt 0 && { time . "$@";echo;true; } || . "$@" ; }
function Source { test "$debug" -gt 0 && { time . "$@";echo;true; } || . "$@" ; }
function addmanpaths {
	for manpath
	do
		test ! -d "$manpath" && continue
		echo $MANPATH | \grep -wq "$manpath" || {
			test -z "$MANPATH" && MANPATH=$manpath || MANPATH=$MANPATH:$manpath
		}
	done
	export MANPATH
}
function addpaths {
	for path
	do
		test ! -d "$path" && continue
		echo $PATH | \grep -wq "$path" || PATH=$path:$PATH
	done
	export PATH
}

TeXLiveDIR=$(\ls -d /usr/local/texlive/*/bin/* 2>/dev/null | egrep "/texlive/[0-9]+/bin/$arch-${osFamily,,}")
addpaths $TeXLiveDIR

which tlmgr >/dev/null 2>&1 && test -r $initDir/.bash_profile.texlive && SourceProfile $initDir/.bash_profile.texlive

export bashProfileLoaded=1

[ $osFamily = Linux ] && export osID=$(source /etc/os-release && echo $ID) osID_LIKE=$(source /etc/os-release && echo $ID_LIKE)

initDir=$(basename $initDir) #Pour creer des liens symboliques relatifs a $HOME
cd $HOME
[ -f ~/.profile ] || ln -sv $initDir/.bash_profile ~/.profile
[ -f ~/.bashrc  ] || ln -sv $initDir/.bashrc ~/.bashrc
[ -f ~/.bash_logout ] || ln -sv $initDir/.bash_logout ~/.bash_logout
initDir=$HOME/$initDir

#DEFINITION DES VARIABLES
export HISTSIZE=2000
export HISTFILESIZE=4000
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'
test $HOSTNAME && export HOSTNAME || export HOSTNAME=$(hostname | cut -d. -f1)
export EDITOR=vim
export UPMC_ID=3607968
export UPMC=$UPMC_ID@ssh.ufr-info-p6.jussieu.fr
export ENST=mansfeld@ssh.enst.fr
export myDefault_sshOptions="-A -Y"
export JOLLA=nemo@jolla-wlan
#export HOMEBREW_TEMP=$HOME/tmp
export HOMEBREW_NO_GITHUB_API=1
which go >/dev/null 2>&1 && test -z "$GOPATH" && export GOPATH=$HOME/go
export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:~/gnu/lib/pkgconfig:~/local/lib/pkgconfig
PERL5LIB="$HOME/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="$HOME/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"$HOME/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=$HOME/perl5"; export PERL_MM_OPT;
export myPerl5DefaultOptions="-ale"
export PIP_FORMAT=columns

if ! groups 2>/dev/null | egrep -wq "sudo|adm|admin|root|wheel";then
	export HOSTALIASES=~/.hosts
	export PYTHONUSERBASE=$HOME/.local
	export HOMEBREW_PREFIX=$HOME/usr/local
fi

export domain=$(awk -F"[ .]" '/domain/{print$(NF-1);exit}' /etc/resolv.conf /private/etc/resolv.conf 2>/dev/null)
test -z $domain && export domain=local # Si le domaine est inconnu
case $domain in
jussieu|enst)
	export proxyName=proxy
	export proxyPort=3128
	;;
*)
	export proxyName=unknown
	export proxyPort=0
	;;
esac

export ssh=$(which ssh)

#Si le proxy est joignable
if [ $domain != localhost ] && nc -v -z -w 4 $proxyName $proxyPort >/dev/null 2>&1
then
	test -z $http_proxy && export http_proxy=http://proxy:$proxyPort
fi

if test -n "$http_proxy"; then
	export https_proxy=$http_proxy
	export dnsSuffix=$(basename $http_proxy | cut -d. -f2- | cut -d: -f1)
fi

which gnuplot >/dev/null 2>&1 && export GNUTERM=qt

export RSYNC_SKIP_COMPRESS_LIST="7z/aac/avi/bz2/deb/flv/gz/iso/jpeg/jpg/mkv/mov/m4a/mp2/mp3/mp4/mpeg/mpg/oga/ogg/ogm/ogv/webm/rpm/tbz/tgz/z/zip"
export RSYNC_EXCLUSION=$(printf -- "--exclude %s/ " /dev /sys /run /proc)
#FIN DE DEFINITION DES VARIABLES

if [ $osFamily = Linux ] || [ $osFamily = Darwin ]
then
	Echo
	if which ssh-agent >/dev/null 2>&1; then
		tty -s && Echo "=> Testing if not logged through ssh i.e if the SSH_CLIENT variable is not set ..." >&2
		if test -z "$SSH_CLIENT"; then # Si on est PAS a l autre bout d une connection ssh
			tty -s && Echo "=> Testing if the ssh-agent is loaded ..." >&2
			if pgrep -u $USER ssh-agent >/dev/null 2>&1;then
				Echo "=> The ssh-agent is already running." >&2
				# Connecting to the already ssh-agent if SSH_AGENT_PID and/or SSH_AUTH_SOCK are unset
				test -z "$SSH_AGENT_PID" && export SSH_AGENT_PID=$(\pgrep -u $USER -n ssh-agent)
				test -z "$SSH_AUTH_SOCK" && export SSH_AUTH_SOCK=$(\ls /tmp/ssh-*/agent.$(($SSH_AGENT_PID-1)))
			else
				Echo "=> Starting the ssh-agent for $USER ..." >&2
				eval $(ssh-agent -s) >/dev/null
			fi
		fi
		pgrep -lfu $USER ssh-agent 2>/dev/null
		Echo >&2
	fi
	
	#Definition des parametres de proxy dans cpan
	if test "$http_proxy"
	then
		grep -q "http_proxy.*$http_proxy" ~/.cpan/CPAN/MyConfig.pm 2>/dev/null
		test $? = 1 && printf "o conf http_proxy $http_proxy\no conf commit" | cpan
	fi

	#my locale configuration
	which locale >/dev/null 2>&1 && test -e $initDir/.bash_profile.locale && SourceProfile $initDir/.bash_profile.locale
	#GDM_LANG=fr_FR.UTF-8
	export GDM_LANG=$LANG

	#my lpr configuration
	which lpr >/dev/null 2>&1 && test -f $initDir/.bash_profile.lpr && SourceProfile $initDir/.bash_profile.lpr
fi

test -r $initDir/.bash_profile.$osFamily && SourceProfile $initDir/.bash_profile.$osFamily

if [ $osFamily != Darwin ] && [ $osFamily != Linux ]; then
	which lsb_release >/dev/null 2>&1 && export system="$(lsb_release -sd | awk -F '"' '{print$(NF-1)}')" || export system=$(echo $HOSTTYPE-$OSTYPE | sed "s/arm[^-]*-/arm-/")
fi

which matlab >/dev/null 2>&1 && test -r $initDir/.bash_profile.matlab && SourceProfile $initDir/.bash_profile.matlab
brew=$(\ls ~/.linuxbrew/bin/brew /home/linuxbrew/.linuxbrew/bin/brew 2>/dev/null | head -1)
set -o | grep -q xtrace.*on && xtrace="set -o xtrace"
set +x
test -x "$brew" && test -r $initDir/.bash_profile.brew && SourceProfile $initDir/.bash_profile.brew
$xtrace
which hub >/dev/null 2>&1 && eval "$(hub alias -s)"

test "$debug" -lt 3 && set +x
test "$debug" -gt 0 && echo "=> END of $bold${colors[blue]}$(basename ${BASH_SOURCE[0]})$normal"
