# vim: set syn=bash noet:
declare -A | grep -wq colors || source $initDir/.colors
test "$debug" -gt 0 && echo "=> Running $bold${colors[blue]}$(basename ${BASH_SOURCE[0]})$normal ..."

function addKeys {
	for key
	do
		sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys $key
	done
}
function apt {
	local args=$@
	local firstArg=$1
	case $firstArg in
		install|purge) sudo command apt $args -V;;
	*) command apt $args;;
	esac
}
function aptGet {
	local args=$@
	local firstArg=$1
	case $firstArg in
		install|purge) sudo command apt $args -V;;
		download) command apt-get $args --print-uris && $(which apt-get) $args;;
		*) command apt-get $args;;
	esac
}
function aptPrintURIS {
	local aptGet="command apt-get"
	for apt
	do
		$aptGet download --print-uris "$apt"
	done
}
function apt_cache {
	local apt_cache="command apt-cache"
	firstArg=$1
	if [ "$firstArg" = search ]
	then
		$apt_cache $@ | sort -u
	else
		$apt_cache $@
	fi
}
function aptitude {
	args=$@
	firstArg=$1
	case $firstArg in
	install|reinstall|purge) sudo command aptitude $args -V;;
	*) command aptitude $args;;
	esac
}
function debEditDependencies {
	test $# = 0 && {
		echo "=> Usage: $FUNCNAME debianPackageFileName" >&2
		return 1
	}

	local pkg=$1
	local newPackage=${pkg/.deb/_NEW.deb}
	local tmp=tmp
	local dpkg_deb="command dpkg-deb"
	$dpkg_deb -x $pkg $tmp/
	$dpkg_deb --control $pkg $tmp/DEBIAN
	$EDITOR $tmp/DEBIAN/control
	dpkg -l gdebi | grep -q ^ii || sudo apt install -Vy gdebi
	dpkg -l $pkg  | grep -q ^ii || $dpkg_deb -b $tmp/ $newPackage && echo "=> Installing \"$pkg\" and its dependencies ..." && sudo gdebi $newPackage
	rm -fr $tmp/
}
function downgradePackages {
	for package
	do
		previousVersion=$(command apt-cache show $package | grep Version | sed -n '2p' | cut -d' ' -f2)
		sudo command apt install -V $package=$previousVersion
	done
}
function dpkgExists {
	test $1 && dpkg -l $1 | grep -q ^ii
}
function fixAptKeys {
	LANG=C apt-key list | awk -F"/| *" '/expired/{print"sudo apt-key del "$3}' | sh -x
	time (sudo apt-get update 2>/tmp/keymissing; cat /tmp/keymissing)
	for key in $(awk '/Release:.*not available: NO_PUBKEY/{print substr($NF,9)}' /tmp/keymissing | sort -u)
	do
		echo
		echo "=> Processing key: $key"
		sudo apt-key del $key
		sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys $key
	done

	for keyFile in $(awk '/gpg: keyblock resource .*resource limit/{print gensub("\`|.:","","g",$4)" "}' /tmp/keymissing)
	do
		sudo rm -v $keyFile
	done
	\rm -v /tmp/keymissing
}
function move_Extra_Keys_To_Main_APT_KeyRing {
	apt-key list 2>&1 >/dev/null | awk -F"[\`']" '/resource limit/{print "sudo apt-key add "$2"; sudo \\rm -vf "$2}' | sh -x
}
function reinstallOrignialPackages {
	local packagesList=$@
	test $# != 0 && sudo command apt install -V $(printf "%s/$(lsb_release -sc) " $packagesList)
}
function removePackages {
	#echo "=> regexp = $regexp" >&2
	local regexp=$1
	shift
	case $regexp in
	""|.) echo "=> Usage: $FUNCNAME non-empty-regexp" >&2;return 1;;
	esac
	dpkg -l | awk 'BEGIN {printf"sudo apt purge -V "}'"/$regexp/"'{printf $2" "}'"END{print \"$*\"}" | sh -x
}
function updateRepositoryKeys {
	time sudo apt-get update 2>&1 >/dev/null | awk '/Release:.*not available: NO_PUBKEY/{print "sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys "$NF}' | sh -x
	sudo apt-key update
}
function website {
	for pkg
	do
		command apt-cache show $pkg | egrep "Homepage:|Package:" | sort -u
#		open $(command apt-cache show $pkg | egrep "Homepage:" | sort -u)
	done
}

set +x
test "$debug" -gt 0 && echo "=> END of $bold${colors[blue]}$(basename ${BASH_SOURCE[0]})$normal"
