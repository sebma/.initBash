# vim: set syn=bash noet:
declare -A | grep -wq colors || source $initDir/.colors
test "$debug" -gt 0 && echo "=> Running $bold${colors[blue]}$(basename ${BASH_SOURCE[0]})$normal ..."

test -f /etc/debian_version && Source $initDir/.bash_functions.Debian # Si c'est un Linux de type Debian

function brewInstall {
	which brew >/dev/null 2>&1 || sh -c "$(\curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"
	which brew >/dev/null || return 1
	brew update
}
function connect2SSID {
	local ssid=$1
	set -x
	nmcli con status
	time nmcli con up id $ssid
	nmcli con status
	time \curl -A "" ipinfo.io/ip || time \wget -qU "" -O- ipinfo.io/ip
	set +x
}
function lanip {
	local ethName=$1
	if [ -n "$ethName" ]
	then
		printf "$ethName: "
		\ip addr show dev $ethName | awk '/inet /{print$2}'
	else
		\ip addr show | awk '{if(/(UP|UNKNOWN)/){interface=$2;found=1}else if(/DOWN/)found=0;if(found==1 && /inet /)print interface" "$2}'
	fi | column -t
}
function locate {
	local locate="command locate"
	groups 2>/dev/null | \egrep -wq "sudo|admin" && locateOptions="-e" || locateOptions="--database $HOME/.local/lib/mlocate/mlocate.db -e"
	echo "$@" | \grep -q "\-[a-z]*r" && $locate $locateOptions "$@" || $locate $locateOptions -i --regex "${@}"
}
function mac@ {
	ethName=$1
	if [ -n "$ethName" ]
	then
		printf "$ethName: "
		\ip addr show dev $ethName | awk '/ether/{print$2}'
	else
		\ip addr show | awk '{if(/(UP|UNKNOWN)/){interface=$2;found=1}else if(/DOWN/)found=0;if(found==1 && /ether/)print interface" "$2}'
	fi
}
function mountISO {
	loopBackDevice=$(udisksctl loop-setup -r -f "$1" | awk -F "[ .]" '{print$(NF-1)}')
	udisksctl mount -b $loopBackDevice
}
function open {
	local openCommand="command xdg-open"
	[ $# = 0 ] && set -- .
	for file
	do
		$openCommand "$file" 2>&1 | \egrep -v "MBuntu-Y-For-Unity"
	done
}
function topf {
	$find . -xdev $prunePathsFindExpression -type f -size +10M -exec ls -l --block-size=M --time-style=+"%Y-%m-%d %T" {} \; 2>/dev/null | sort -nrk5 | head -n "$1" | numfmt --field 5 --from=iec --to=iec-i --suffix=B | column -t
}
function topflines {
	$find "$@" -xdev $prunePathsFindExpression -type f -size +10M -exec ls -l --block-size=M --time-style=+"%Y-%m-%d %T" {} \; 2>/dev/null | sort -nrk5 | head -n $(($LINES-4)) | numfmt --field 5 --from=iec --to=iec-i --suffix=B | column -t
}
function umount {
	local dir_or_device="$1"
	local device
	test "$dir_or_device" && {
		device=$(LC_MESSAGES=C \df "$dir_or_device" | awk '!/Filesystem/{print$1}')
		mountDIR="$(LC_MESSAGES=C \df "$dir_or_device" | awk '!/Filesystem/{$1=$2=$3=$4=$5="";gsub("^ +","");print}')"
		fsType=$(mount | awk "/$(basename "$mountDIR")/"'{print$5}')
		echo "=> Unmounting $device ..." >&2
		case $fsType in
			fuse.sshfs) fusermount -u "$mountDIR";;
			*) command umount -v "$@" || command umount.udisks2 "$@"  || command umount.udisks "$@" || { sudo -k;sudo $(which umount) -v "$@"; } ;;
		esac
		[ $(echo "$mountDIR" | cut -d/ -f1) = /mnt ] || [ $(echo "$mountDIR" | cut -d/ -f1) = /media  ] && echo "=> ls $(dirname "$mountDIR") :" && ls $(dirname "$mountDIR")
	}
}
function umountISO {
	loopBackDevice=$(sudo losetup -a | grep $1 | cut -d: -f1)
	test -z $loopBackDevice && loopBackDevice=$1
	udisksctl unmount -b $loopBackDevice
	udisksctl loop-delete -b $loopBackDevice
}
function watchProcess {
	local pidList=""
	mkdir -p ~/log
	test $# = 1 && while true
	do
		pidList=$(\pgrep -f "$1")
		ppidList=$(\ps -o ppid= $pidList && echo)
		test -n "$pidList" && ( \ps -fp $pidList && test -n "$ppidList" && echo "=> Showing the parent process :" && \ps h -fp $ppidList ) | tee -a ~/log/processSPY.log && break
		sleep 0.01
	done
}
function wifiCapabilities {
	export LANG=C
	local physicalDevice=$(iw dev | \sed -n "1s/#//;1p")
	if [ $(uname -s) = Darwin ]
	then
		echo "=> Darwin/macOS operating systems are not supported yet." >&2
		exit 1
	fi

	if which iw >/dev/null 
	then
		wiFiDevice=$(iw dev | awk '/Interface/{lastInterface=$NF}END{print lastInterface}')
	elif which iwconfig >/dev/null 
	then
		wiFiDevice="$(iwconfig 2>/dev/null | awk '/^[^ \t]/ { if ($1 ~ /^[0-9]+:/) { lastInterface=$2 } else { lastInterface=$1 } }END{print lastInterface}')"
	fi

	[ "$wiFiDevice" ] || {
		echo "=> ERROR : Could not find any wireless network card." >&2
		exit 1
	}

	which iw >/dev/null && echo "=> Wifi physical device capabilities :" && iw phy $physicalDevice info
	which iwlist >/dev/null && {
		echo "========================================================================"
		iwlist $wiFiDevice bitrate || sudo iwlist $wiFiDevice bitrate
		iwlist $wiFiDevice encryption || sudo iwlist $wiFiDevice encryption
		iwlist $wiFiDevice frequency
		iwlist $wiFiDevice event
		iwlist $wiFiDevice retry
	}
}
function wifiInfos {
	export LANG=C
	local physicalDevice=$(iw dev | \sed -n "1s/#//;1p")
	if [ $(uname -s) = Darwin ]
	then
		echo "=> Darwin/macOS operating systems are not supported yet." >&2
		exit 1
	fi

	if which iw >/dev/null 
	then
		wiFiDevice=$(iw dev | awk '/Interface/{lastInterface=$NF}END{print lastInterface}')
	elif which iwconfig >/dev/null 
	then
		wiFiDevice="$(iwconfig 2>/dev/null | awk '/^[^ \t]/ { if ($1 ~ /^[0-9]+:/) { lastInterface=$2 } else { lastInterface=$1 } }END{print lastInterface}')"
	fi

	[ "$wiFiDevice" ] || {
		echo "=> ERROR : Could not find any wireless network card." >&2
		exit 1
	}

	if which iw >/dev/null; then
		echo "=> Wifi physical device capabilities :"
		iw phy $physicalDevice info

		echo "=> Stations infos. :"
		iw dev $wiFiDevice station dump

		echo "=> Wifi networks list :"
		which nmcli && nmcli dev wifi list || iw dev $wiFiDevice scan || sudo iw dev $wiFiDevice scan

		echo "=> Connected network link status :"
		iw dev $wiFiDevice link || sudo iw dev $wiFiDevice link
	fi

	which iwlist >/dev/null && {
		echo "========================================================================"
		iwlist $wiFiDevice bitrate || sudo iwlist $wiFiDevice bitrate
		iwlist $wiFiDevice encryption || sudo iwlist $wiFiDevice encryption
		iwlist $wiFiDevice frequency
		iwlist $wiFiDevice event
		iwlist $wiFiDevice retry
		iwlist $wiFiDevice scan | more
	}
}
function ytdlUpdate {
	typeset -r isAdmin=$(groups 2>/dev/null | \egrep -wq "sudo|adm|admin|root" && echo true || echo false)
	local ytdlPackageURL=youtube-dl
	local sudo=""
	if $isAdmin
	then
		sudo="command sudo -H"
	fi
	local ytdlPythonVersion=$(youtube-dl -v 2>&1 | awk -F "[ .]" '/Python version/{printf$4"."$5}')
	$sudo $(which pip$ytdlPythonVersion) install -U $ytdlPackageURL
}
function ytdlUpdateFromGit {
	typeset -r isAdmin=$(groups 2>/dev/null | \egrep -wq "sudo|adm|admin|root" && echo true || echo false)
	local ytdlPackageURL=git+https://github.com/rg3/youtube-dl
	local sudo=""
	if $isAdmin
	then
		sudo="command sudo -H"
	fi
	local ytdlPythonVersion=$(youtube-dl -v 2>&1 | awk -F "[ .]" '/Python version/{printf$4"."$5}')
	$sudo $(which pip$ytdlPythonVersion) install -U $ytdlPackageURL
}

set +x
test "$debug" -gt 0 && echo "=> END of $bold${colors[blue]}$(basename ${BASH_SOURCE[0]})$normal"
