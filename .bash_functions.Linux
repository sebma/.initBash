# vim: set ft=bash noet:
! declare 2>&1 | grep -wq ^colors= && [ $BASH_VERSINFO -ge 4 ] && source $initDir/.colors
test "$debug" -gt 0 && echo "=> Running $bold${colors[blue]}$(basename ${BASH_SOURCE[0]})$normal ..."

test -r $initDir/.bash_functions.$osID_LIKE && Source $initDir/.bash_functions.$osID_LIKE # Si c'est un Linux de type Debian ou Redhat

function batteryINFO {
	which acpi >/dev/null 2>&1 && acpi -bi
	which upower >/dev/null 2>&1 && upower -i $(upower -e | grep BAT)
	which inxi >/dev/null 2>&1 && inxi -Bxxx
}
function brewInstall {
	which brew >/dev/null 2>&1 || sh -c "$(\curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"
	which brew >/dev/null || return 1
	brew update
}
function connect2SSID {
	local ssid=$1
	test -z "$ssid" && {
		echo "=> Please chose a network among these :" >&2
		nmcli con
		return 1
	}
	set -x
	nmcli con status 2>/dev/null || nmcli con show --active
	time nmcli con up id $ssid
	nmcli con status 2>/dev/null || nmcli con show --active
	time \curl -A "" ipinfo.io/ip || time \wget -qU "" -O- ipinfo.io/ip
	set +x
}
function df {
	local df=$(which df)
	local dfOptions="-PTh"
	LANG=C $df $dfOptions $@ | \grep "^Filesystem" 1>&2
	LANG=C $df $dfOptions $@ | grep -v "^Filesystem"
}
function isoLabel {
	for isoFile;do
		blkid -o export "$isoFile" | grep LABEL | cut -d= -f2-
	done
}
function lanip {
	local ethName=$1
	if [ -n "$ethName" ]
	then
#		printf "$ethName: "
		\ip addr show dev $ethName | awk '/inet /{print$2}'
	else
		\ip addr show | awk '{if(/(UP|UNKNOWN)/){interface=$2;found=1}else if(/DOWN/)found=0;if(found==1 && /inet /)print interface" "$2}'
	fi | column -t
}
function locate {
	local locate="command locate"
	groups 2>/dev/null | \egrep -wq "sudo|admin" && locateOptions="-e" || locateOptions="--database $HOME/.local/lib/mlocate/mlocate.db -e"
	echo "$@" | \grep -q "\-[a-z]*r" && $locate $locateOptions "$@" || $locate $locateOptions -i --regex "${@}"
}
function lseth {
	\lspci | awk '/Ethernet controller/{print$1}' | while read device
	do
		\lspci -nns $device "$@"
	done
	\lsusb | awk '/\<Ethernet\>/{print$6}' | while read device
	do
		\lsusb -d $device "$@"
	done
}
function lsgroup {
	for group
	do
		printf "%s:" $group;awk -F: "/$group:/"'{gsub(","," ");print$NF}' /etc/group
	done
}
function lswifi {
	\lspci | awk '/Network controller/{print$1}' | while read device
	do
		\lspci -nns $device "$@"
	done
	\lsusb | awk '/\<Wireless\>/{print$6}' | while read device
	do
		\lsusb -d $device "$@"
	done
}
function mac@ {
	ethName=$1
	if [ -n "$ethName" ]
	then
		printf "$ethName: "
		\ip addr show dev $ethName | awk '/ether/{print$2}'
	else
		\ip addr show | awk '{if(/(UP|UNKNOWN)/){interface=$2;found=1}else if(/DOWN/)found=0;if(found==1 && /ether/)print interface" "$2}'
	fi
}
function mountISO {
	if [ $# = 0 ];then
		echo "=> $FUNCNAME isoFile" >&2 
		return 1
	fi
	isoFile="$1"
	isoLabel="$(blkid -o export "$isoFile" | grep LABEL | cut -d= -f2-)"
#	mkdir -p "/media/$USER/$isoLabel/"
	fuseiso -p "$isoFile" "$HOME/mnt/$isoLabel/" && command df -TP "$HOME/mnt/$isoLabel/"

#	loopBackDevice=$(udisksctl loop-setup -r -f "$1" | awk -F "[ .]" '{print$(NF-1)}')
#	udisksctl mount -b $loopBackDevice
}
function nmRestart {
	local -r systemType=$( ( strings $(\ps -p 1 -o cmd= | cut -d" " -f1) | \egrep -o "upstart|sysvinit|systemd" || echo unknown ) | head -1)
	if ! env | grep SSH_CONNECTION=;then
		if sudo -k true;then
			if [ $systemType = systemd ];then
				sudo systemctl --no-block restart network-manager
				systemctl --no-pager status network-manager
			elif [ $systemType = upstart ] || [ $systemType = sysvinit ];then
				sudo service network-manager restart
#				sudo service network-manager status
			fi
			sleep 7
			\curl -sA "" ipinfo.io/ip 2>/dev/null || \wget -qU "" -O- ipinfo.io/ip
		fi
	fi
}
function open {
	local openCommand="command xdg-open"
	[ $# = 0 ] && set -- .
	for file
	do
		$openCommand "$file" 2>&1 | \egrep -v "MBuntu-Y-For-Unity"
	done
}
function processENV_Variables {
	local processName=$1
	local -i pid=0
	local varNAME=$2
	pid=$(\pgrep -f $processName)
	[ $pid != 0 ] && tr '\0' '\n' < /proc/$pid/environ | egrep -v "^hidden=" | grep -P "^[^\s%]+=" | sort -u | egrep -w "$varNAME"
}
function topf {
	$find . -xdev $prunePathsFindExpression -type f -size +10M -exec ls -l --block-size=M --time-style=+"%Y-%m-%d %T" {} \; 2>/dev/null | sort -nrk5 | head -n "$1" | numfmt --field 5 --from=iec --to=iec-i --suffix=B | column -t
}
function topflines {
	$find "$@" -xdev $prunePathsFindExpression -type f -size +10M -exec ls -l --block-size=M --time-style=+"%Y-%m-%d %T" {} \; 2>/dev/null | sort -nrk5 | head -n $(($LINES-4)) | numfmt --field 5 --from=iec --to=iec-i --suffix=B | column -t
}
function umount.seb {
	set -- ${@%/}  # Remove trailing "/" from all arguments
	local dir_or_device="$1"
	local device mountDIR mountDIR_ROOT fsType=unknown
	local df=$(which df)

	if [ $# == 0 ]
	then
		echo "=> Usage: $FUNCNAME dir_or_device1" >&2
		return 1
	fi

	if ! mount | \grep -q "$dir_or_device\s"
	then
		echo "=> $FUNCNAME : ERROR : $dir_or_device is not mounted." >&2
		return 2
	fi


	if echo "$dir_or_device" | \grep -q ":";then # For NFS ?
		device="$dir_or_device"
		mountDIR="$(LC_MESSAGES=C $df 2>/dev/null | \grep "$dir_or_device" | awk '!/Filesystem/{$1=$2=$3=$4=$5="";gsub("^ +","");print}')"
	else
		echo "=> dir_or_device = $dir_or_device"
		case "$dir_or_device" in
		/|/dev)
			echo "=> ERROR: It's forbidden to unmount <$dir_or_device>." >&2
#			mountDIR="$(LC_MESSAGES=C $df "$dir_or_device" 2>/dev/null | awk '!/Filesystem/{$1=$2=$3=$4=$5="";gsub("^ +","");print}')"
			return 1
			;;
		*)
			device=$(LC_MESSAGES=C $df "$dir_or_device" | awk '!/Filesystem/{print$1}')
			mountDIR="$dir_or_device"
			;;
		esac
	fi

	device=$(echo "$device" | \egrep -wq /dev/dm-[0-9]+ && { lsblk -n -o NAME "$device" | awk '{print"/dev/mapper/"$1}'; true; } || echo "$device")

	fsType=$(LC_MESSAGES=C $df -T | grep "$device\s" | awk '!/Filesystem/{print$2}')
	[ $(blkid $device | wc -c) != 0 ] && fsType=$(blkid $device -o value -s TYPE) # If $device is in /etc/blkid.tab

	echo "=> Unmounting $device ..." >&2
	case $fsType in
		iso96600) command udisksctl unmount -b $device;udisksctl loop-delete -b $device ;;
		fuseblk|exfat) command umount.udisks2 "$@"  || command umount.udisks "$@" || udisksctl unmount -b $device || udisksctl unmount -b $device -f || { sudo -k $(which umount) -v "$@"; } ;;
		fuse.*) fusermount -u "$mountDIR";;
		unknown) echo "=> $FUNCNAME : ERROR : This filesystem is of an <unknown> type." >&2; return 3;;
		*) command umount -v "$@" || command umount.udisks2 "$@"  || command umount.udisks "$@" || udisksctl unmount -b $device || udisksctl unmount -b $device -f || { sudo -k $(which umount) -v "$@"; } ;;
	esac
	rcCode=$?
	mountDIR_ROOT="$(echo "$mountDIR" | cut -d/ -f-2)"
	[ "$mountDIR_ROOT" = /mnt ] || [ "$mountDIR_ROOT" = /media  ] && echo "=> ls $(dirname "$mountDIR") :" && ls $(dirname "$mountDIR")
	set +x
	return $rcCode
}
function umountISO {
	if [ $# = 0 ];then
		echo "=> $FUNCNAME mountDir" >&2 
		return 1
	fi
	mountDir="$1"
	fusermount -u "$mountDir"
#	loopBackDevice=$(sudo losetup -a | grep $1 | cut -d: -f1)
#	test -z $loopBackDevice && loopBackDevice=$1
#	udisksctl unmount -b $loopBackDevice
#	udisksctl loop-delete -b $loopBackDevice
}
function watchProcess {
	local pidList=""
	local ps=$(which ps)
	mkdir -p ~/log
	test $# = 1 && while true
	do
		pidList=$(\pgrep -f "$1")
		ppidList=$($ps -o ppid= $pidList && echo)
		test -n "$pidList" && ( $ps -fp $pidList && test -n "$ppidList" && echo "=> Showing the parent process :" && $ps h -fp $ppidList ) | tee -a ~/log/processSPY.log && break
		sleep 0.01
	done
}
function wifiCapabilities {
	export LANG=C
	local physicalDevice wiFiDevice
	if [ $osFamily = Darwin ]
	then
		echo "=> Darwin/macOS operating systems are not supported yet." >&2
		return 1
	fi

	wiFiDevice=$(iw dev 2>/dev/null | awk '/Interface/{lastInterface=$NF}END{print lastInterface}')
	test "$wiFiDevice" || wiFiDevice="$(iwconfig 2>/dev/null | awk '/^[^ \t]/ { if ($1 ~ /^[0-9]+:/) { lastInterface=$2 } else { lastInterface=$1 } }END{print lastInterface}')"

	[ "$wiFiDevice" ] || {
		echo "=> ERROR : Could not find any wireless network card." >&2
		return 1
	}

	physicalDevice=$(iw dev 2>/dev/null | \sed -n "1s/#//;1p")
	test "$physicalDevice" && echo "=> Wifi physical device capabilities :" && iw phy $physicalDevice info

	which iwlist >/dev/null && {
		echo "========================================================================"
		iwlist $wiFiDevice bitrate || sudo iwlist $wiFiDevice bitrate
		iwlist $wiFiDevice encryption || sudo iwlist $wiFiDevice encryption
		iwlist $wiFiDevice frequency
		iwlist $wiFiDevice event
		iwlist $wiFiDevice retry
	}
}
function wifiInfos {
	export LANG=C
	local physicalDevice wiFiDevice
	if [ $osFamily = Darwin ]
	then
		echo "=> Darwin/macOS operating systems are not supported yet." >&2
		return 1
	fi

	wiFiDevice=$(iw dev 2>/dev/null | awk '/Interface/{lastInterface=$NF}END{print lastInterface}')
	test "$wiFiDevice" || wiFiDevice="$(iwconfig 2>/dev/null | awk '/^[^ \t]/ { if ($1 ~ /^[0-9]+:/) { lastInterface=$2 } else { lastInterface=$1 } }END{print lastInterface}')"

	[ "$wiFiDevice" ] || {
		echo "=> ERROR : Could not find any wireless network card." >&2
		return 1
	}

	if which iw >/dev/null; then
		physicalDevice=$(iw dev | \sed -n "1s/#//;1p")
		echo "=> Wifi physical device capabilities :"
		iw phy $physicalDevice info

		echo "=> Stations infos. :"
		iw dev $wiFiDevice station dump

		echo "=> Wifi networks list :"
		which nmcli >/dev/null && nmcli dev wifi list || iw dev $wiFiDevice scan || sudo iw dev $wiFiDevice scan

		echo "=> Connected network link status :"
		iw dev $wiFiDevice link || sudo iw dev $wiFiDevice link
	fi

	which iwlist >/dev/null && {
		echo "========================================================================"
		iwlist $wiFiDevice bitrate || sudo iwlist $wiFiDevice bitrate
		iwlist $wiFiDevice encryption || sudo iwlist $wiFiDevice encryption
		iwlist $wiFiDevice frequency
		iwlist $wiFiDevice event
		iwlist $wiFiDevice retry
		iwlist $wiFiDevice scan | more
	}
}
function wifiList {
	local wifiInterface=$(iw dev 2>/dev/null | awk '/Interface/{lastInterface=$NF}END{print lastInterface}')
	test "$wifiInterface" || wifiInterface="$(iwconfig 2>/dev/null | awk '/^[^ \t]/ { if ($1 ~ /^[0-9]+:/) { lastInterface=$2 } else { lastInterface=$1 } }END{print lastInterface}')"

	if test "$wifiInterface"; then
		if which nmcli >/dev/null; then
			nmcliVersion=$(nmcli -v | awk -F"[. ]" '/version/{printf"%d.%d%02d\n", $4, $5, $6}')
			\nmcli -f ssid,bssid,mode,freq,rate,signal,security,active dev wifi list | \grep 'SSID' >&2 # Print nmcli headers
			\nmcli -f ssid,bssid,mode,freq,rate,signal,security,active dev wifi list | grep -v 'SSID' 
		elif which iw >/dev/null; then
			sudo iw dev $wifiInterface scan | \grep SSID
		elif which iwlist >/dev/null; then
			sudo iwlist $wifiInterface scan | \grep SSID
		fi
	fi
}
function wifiRestart {
	if ! env | grep SSH_CONNECTION=;then
		\nmcli nm wifi off 2>/dev/null || \nmcli radio wifi off
		\nmcli nm wifi on  2>/dev/null || \nmcli radio wifi on
		sleep 7
		\curl -sA "" ipinfo.io/ip 2>/dev/null || \wget -qU "" -O- ipinfo.io/ip
	fi
}

set +x
test "$debug" -gt 0 && echo "=> END of $bold${colors[blue]}$(basename ${BASH_SOURCE[0]})$normal"
