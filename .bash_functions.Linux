# vim: set ft=sh noet:
! declare 2>&1 | grep -wq ^colors= && [ $BASH_VERSINFO -ge 4 ] && source $initDir/.colors
test "$debug" -gt 0 && echo "=> Running $bold${colors[blue]}$(basename ${BASH_SOURCE[0]})$normal ..."

test -r $initDir/.bash_functions.$osID_LIKE && Source $initDir/.bash_functions.$osID_LIKE # Si c'est un Linux de type Debian ou Redhat
test -r $initDir/.bash_functions.$osFamily.system && Source $initDir/.bash_functions.$osFamily.system # For system functions call via the "Sudo" function

function connect2MyHiddenWifi {
	wifi5GHzCapable >/dev/null && { connect2SSID sebWlan;return; } || connect2SSID sebWlan_2.4GHz
}
function connect2SSID {
	local ssid=$1
	test -z "$ssid" && {
		echo "=> Please chose a connection among these :" >&2
		nmcli con | grep 802-11-wireless
		return 1
	}

	local wiFiInterface=$(nmcli dev | awk '/\<wifi|802-11-wireless\>/{print$1}')
	local currentWifiSSID=$({ nmcli con status || nmcli con show --active;} 2>/dev/null | awk "/\<$wiFiInterface|802-11-wireless\>/"'{print$1}')

	if [ "$currentWifiSSID" = $ssid ];then
		echo "=> $FUNCNAME : You're already connected to <$ssid>." >&2
		return 2
	elif [ -n "$currentWifiSSID" ];then
		nmcli con status 2>/dev/null || nmcli con show --active
	fi

	time nmcli con up id $ssid
	echo
	nmcli con status 2>/dev/null || nmcli con show --active
	echo
	time \dig -4 +short @resolver1.opendns.com A myip.opendns.com 2>/dev/null || time host -4 -t A myip.opendns.com resolver1.opendns.com | awk '/\<has\>/{print$NF}'
	set +x
}
function df {
	local df=$(which df)
	local dfOptions="-PTh"
	LANG=C $df $dfOptions "$@" | \grep "^Filesystem" 1>&2
	LANG=C $df $dfOptions "$@" | grep -v "^Filesystem"
}
function https2zoomtg {
	if [ $# != 1 ]
	then
		echo "=> Usage: $(basename $0) httpsURL" >&2
		return 1
	fi

	zoommtgURL="$(echo "$1" | sed 's/^https:/zoommtg:/;s|/j/|/join?action=join\&confno=|;s/?pwd=/\&pwd=/')"
	xdg-mime default Zoom.desktop x-scheme-handler/zoommtg
#	xdg-mime query default x-scheme-handler/zoommtg
	xdg-open $zoommtgURL

#	echo "zoom $zoommtgURL & ..."
#	zoom $zoommtgURL &
}
function hw-probeAddNodeToInventory {
	local inventoryID=null
	if ! which hw-probe >/dev/null 2>&1;then
		echo "=> ERROR [$FUNCNAME] : You must first install <hw-probe>." >&2
		return 1
	fi
	if [ $# = 0 ];then
		inventoryID="LHW-8028-0102-D496-15BF"
	elif [ $# = 1 ];then
		inventoryID=$1
	else
		echo "=> $FUNCNAME [inventoryID]" >&2
		return 2
	fi
	sudo -E \hw-probe -all -upload -i $inventoryID && echo "=> INFO: Check your email to add confirm adding the new node to your inventory : https://linux-hardware.org/index.php?view=computers&inventory=$inventoryID" >&2
}
function hw-probeInstall {
	type sudo >/dev/null 2>&1 && [ $(id -u) != 0 ] && groups | egrep -wq "sudo|adm|admin|root|wheel" && local sudo=$(which sudo) || local sudo=""
	local distribName=$(distribName)
	local retCode=0
	if [ $distribName = ubuntu ]; then
		local ubuntuSources=/etc/apt/sources.list
		grep -q universe $ubuntuSources   || $sudo add-apt-repository universe -y
		grep -q multiverse $ubuntuSources || $sudo add-apt-repository multiverse -y
		grep -q "^deb .*unit193/inxi" /etc/apt/sources.list.d/*.list || $sudo add-apt-repository ppa:unit193/inxi -y
		grep -q "^deb .*mikhailnov/hw-probe" /etc/apt/sources.list.d/*.list || $sudo add-apt-repository ppa:mikhailnov/hw-probe -y
		apt-cache policy inxi | grep -q unit193/inxi || $sudo apt update
		apt-cache policy hw-probe | grep -q mikhailnov/hw-probe || $sudo apt update
		dpkg -l inxi | grep -q ^.i || $sudo apt install -V inxi
		dpkg -l hw-probe | grep -q ^.i || $sudo apt install -V hw-probe
		retCode=$?
	elif [ $distribName = arch ]; then
		if $sudo echo "";then
			$sudo pacman -Sy
			$sudo pacman -Fy

			which fakeroot >/dev/null 2>&1 || $sudo pacman -S fakeroot
			which strip >/dev/null 2>&1 || $sudo pacman -S binutils

			if ! which inxi >/dev/null 2>&1;then
				cd inxi >/dev/null 2>&1 || { git clone https://aur.archlinux.org/inxi.git;cd inxi; }
				if git config remote.origin.url | grep -q /inxi;then
					makepkg -si
					retCode=$?
					sync
					cd ->/dev/null
				else
					git clone https://aur.archlinux.org/inxi.git
				fi
			fi

			which make >/dev/null 2>&1 || $sudo pacman -S make

			if ! which hw-probe >/dev/null 2>&1;then
				cd hw-probe >/dev/null 2>&1 || { git clone https://aur.archlinux.org/hw-probe.git;cd hw-probe; }
				if git config remote.origin.url | grep -q /hw-probe;then
					sed -i "/^depends=/s/'edid-decode'//" PKGBUILD
					makepkg -si
					retCode=$?
					sync
					cd ->/dev/null
				else
					git clone https://aur.archlinux.org/hw-probe.git
				fi
			fi
		fi
	fi

	echo
	which hw-probe >/dev/null 2>&1 && hw-probe -v
	return $retCode
}
function hw-probeInstallFromSource {
	type sudo >/dev/null 2>&1 && [ $(id -u) != 0 ] && groups | egrep -wq "sudo|adm|admin|root|wheel" && local sudo=$(which sudo) || local sudo=""
	local distribName=$(distribName)
	local hw_probeGitREPO=https://github.com/linuxhw/hw-probe

	if which hw-probe >/dev/null 2>&1; then
		echo "=> INFO [$FUNCNAME] : hw-probe is already installed." 1>&2
		return 1
	fi

	if ! which git > /dev/null 2>&1; then
		echo "=> ERROR [$FUNCNAME] : You must first install <git>." 1>&2
		return 2
	fi

	local prevDIR=$PWD
	local retCode=0
	mkdir -p ~/git/linuxhw
	if cd ~/git/linuxhw;then
		git clone $hw_probeGitREPO
		if cd $(basename $hw_probeGitREPO);then
			git pull
			$sudo make install prefix=/usr/local
			retCode=$?
			echo
		fi
	fi

	sync
	cd $prevDIR
	which hw-probe >/dev/null 2>&1 && hw-probe -v
	return $retCode
}
function isoLabel {
	for isoFile
	do
		blkid -o value -s LABEL "$isoFile"
	done
}
function lanIP {
	set -o pipefail
	local ip=$(which ip)
	if $ip -4 -brief addr >/dev/null 2>&1;then
		$ip -4 -brief addr show "$@"
	else
		$ip -4 -o addr show "$@" | awk '{print$2" "$4}' | column -t
	fi
	test $? != 0 && $ip addr show help
	set +o pipefail
}
function lanIPv6 {
	set -o pipefail
	local ip=$(which ip)
	if $ip -6 -brief addr >/dev/null 2>&1;then
		$ip -6 -brief addr show "$@"
	else
		$ip -6 -o addr show "$@" | awk '{print$2" "$4}' | column -t
	fi
	test $? != 0 && $ip addr show help
	set +o pipefail
}
function locate {
	local locate="command locate"
	groups 2>/dev/null | \egrep -wq "sudo|admin" && locateOptions="-e" || locateOptions="--database $HOME/.local/lib/mlocate/mlocate.db -e"
	echo "$@" | \grep -q "\-[a-z]*r" && $locate $locateOptions "$@" || $locate $locateOptions -i --regex "${@}"
}
function lseth {
	\lspci -nnd ::200 "$@"
	\lsusb | awk '/\<Ethernet\>/{print$6}' | while read device
	do
		\lsusb -d $device "$@"
	done
}
function lsgroup {
	for group
	do
		printf "%s:" $group;awk -F: "/$group:/"'{gsub(","," ");print$NF}' /etc/group
	done
}
function lsbluetooth {
	\lspci | awk '/Bluetooth/{print$1}' | while read device
	do
		\lspci -nns $device "$@"
	done
	\lsusb -v 2>/dev/null | awk '/^Bus/{id=$6}/\<Bluetooth\>/{print id}' | uniq | while read device
	do
		\lsusb -d $device "$@"
	done
}
function lswifiNICs {
	\lspci -nnd ::280 "$@"
	\lsusb -v 2>/dev/null | awk 'BEGIN{IGNORECASE=1}/^Bus/{id=$6}/\<WLAN\>|802.11|wireless [abgn]|AC1200/{print id}' | uniq | while read device
	do
		\lsusb -d $device "$@"
	done
}
function lvs {
	$(which lvs) -v "$@" | awk '{printf"  %-16s%-36s%5d %-10s%9s%4d%4d%5d%5d %s\\n",$1,$2,$3,$4,$5,$6,$7,$8,$9,$NF}'
}
function mac@ {
	set -o pipefail
	local ip=$(which ip)
	if $ip -brief addr >/dev/null 2>&1;then
		$ip -brief link show "$@"
	else
		$ip -o link show "$@" | awk '/link\/(ether|loopback)/{for(i=1;i<=NF;i++){if($i=="state"){status=$(i+1);break;}};print gensub(":","",1,$2)" "status" "$(NF-2)" "$3}' | column -t
	fi
	test $? != 0 && $ip link show help
	set +o pipefail
}
function man2html {
	local man2html=$(which man2html)
	$man2html -r $(man -w "$1")
}
function mountISO {
	if [ $# = 0 ];then
		echo "=> $FUNCNAME isoFile" >&2 
		return 1
	fi
	isoFile="$1"
	isoLabel="$(blkid -o value -s LABEL "$isoFile")"
	fuseiso -p "$isoFile" "$HOME/mnt/$isoLabel/" && command df -TP "$HOME/mnt/$isoLabel/"

#	loopBackDevice=$(udisksctl loop-setup -r -f "$1" | awk -F "[ .]" '{print$(NF-1)}')
#	udisksctl mount -b $loopBackDevice
}
function open {
	local openCommand="command xdg-open"
	[ $# = 0 ] && set -- .
	for file
	do
		$openCommand "$file" 2>&1 | \egrep -v "MBuntu-Y-For-Unity"
	done
}
function ppidof {
	local regExp="$1"
	\ps -o ppid= $(\pidof "$regExp")
}
function processChildren {
	local -i ppid=0
	test $# != 1 && {
		echo "=> Usage: $FUNCNAME ppid" >&2
		return 1
	} || ppid=$1

	if ps $ppid >/dev/null;then
		echo "  PID COMMAND" > $ppid.log
		while ps $ppid >/dev/null
		do
			for pid in $(ps -o pid= --ppid $ppid)
			do
				\grep -qw $pid $ppid.log || ps -o pid=,command= $pid | tee -a $ppid.log
			done
			sleep 0.5s
		done

		echo "=> cat $ppid.log" >&2
		cat $ppid.log
	else
		echo "=> WARNING: The process of pid <$ppid> is not here anymore" >&2
        return 2
	fi
}
function psAncestors {
	local processName
	test $# != 1 && {
		echo "=> Usage: $FUNCNAME processName" >&2
		return 1
	} || processName=$1

	if ps -C $processName >/dev/null;then
		pstree -a -h -p -T $(pidof -s $processName) -s
	else
		echo "=> WARNING: The process <$processName> is not here anymore" >&2
        return 2
	fi
}
function psHeirs {
	local processName
	test $# != 1 && {
		echo "=> Usage: $FUNCNAME processName" >&2
		return 1
	} || processName=$1

	if ps -C $processName >/dev/null;then
		pstree -a -h -p -T $(pidof -s $processName)
	else
		echo "=> WARNING: The process <$processName> is not here anymore" >&2
        return 2
	fi
}
function processENV_Variables {
	if [ $# != 1 ] && [ $# != 2 ];then
		echo "=> Usage: $FUNCNAME processName [varNAME]" >&2
		return 1
	fi

	local processName=$1
	local -i pid=0
	pid=$(\pidof -s $processName)

	if [ $# = 1 ];then
		[ $pid != 0 ] && tr '\0' '\n' < /proc/$pid/environ | \egrep -v "^hidden=" | \grep -P "^[^\s%]+=" | sort -u
	elif [ $# = 2 ];then
		local varNAME=$2
		[ $pid != 0 ] && tr '\0' '\n' < /proc/$pid/environ | \egrep -v "^hidden=" | \grep -P "^[^\s%]+=" | sort -u | egrep -w "$varNAME"
	fi
}
function topf {
	$find . -xdev $findPrunePathsExpression -type f -size +10M -exec ls -l --block-size=M --time-style=+"%Y-%m-%d %T" {} \; 2>/dev/null | sort -nrk5 | head -n "$1" | numfmt --field 5 --from=iec --to=iec-i --suffix=B | column -t
}
function topflines {
	$find "$@" -xdev $findPrunePathsExpression -type f -size +10M -exec ls -l --block-size=M --time-style=+"%Y-%m-%d %T" {} \; 2>/dev/null | sort -nrk5 | head -n $(($LINES-4)) | numfmt --field 5 --from=iec --to=iec-i --suffix=B | column -t
}
function umount.seb {
	set -- ${@%/}  # Remove trailing "/" from all arguments
	local dir_or_device="$1"
	local device mountDIR mountDIR_ROOT fsType=unknown
	local df=$(which df)

	if [ $# == 0 ]
	then
		echo "=> Usage: $FUNCNAME dir_or_device1" >&2
		return 1
	fi

	if ! mount | \grep -q "$dir_or_device\s"
	then
		echo "=> $FUNCNAME : ERROR : $dir_or_device is not mounted." >&2
		return 2
	fi


	if echo "$dir_or_device" | \grep -q ":";then # For NFS ?
		device="$dir_or_device"
		mountDIR="$(LC_MESSAGES=C $df 2>/dev/null | \grep "$dir_or_device" | awk '!/Filesystem/{$1=$2=$3=$4=$5="";gsub("^ +","");print}')"
	else
		echo "=> dir_or_device = $dir_or_device"
		case "$dir_or_device" in
		/|/dev)
			echo "=> ERROR: It's forbidden to unmount <$dir_or_device>." >&2
#			mountDIR="$(LC_MESSAGES=C $df "$dir_or_device" 2>/dev/null | awk '!/Filesystem/{$1=$2=$3=$4=$5="";gsub("^ +","");print}')"
			return 1
			;;
		*)
			device=$(LC_MESSAGES=C $df "$dir_or_device" | awk '!/Filesystem/{print$1}')
			mountDIR="$dir_or_device"
			;;
		esac
	fi

	device=$(echo "$device" | \egrep -wq /dev/dm-[0-9]+ && { lsblk -n -o NAME "$device" | awk '{print"/dev/mapper/"$1}'; true; } || echo "$device")

	fsType=$(LC_MESSAGES=C $df -a -T | grep "$device\s" | awk '!/Filesystem/{print$2}')
	[ $(blkid $device | wc -c) != 0 ] && fsType=$(blkid $device -o value -s TYPE) # If $device is in /etc/blkid.tab

	echo "=> Unmounting $device ..." >&2
	case $fsType in
		iso9660) command udisksctl unmount -b $device;udisksctl loop-delete -b $device ;;
		fuseblk|exfat) command umount.udisks2 "$@"  || command umount.udisks "$@" || udisksctl unmount -b $device || udisksctl unmount -b $device -f || { sudo -k $(which umount) -v "$@"; } ;;
		fuse.*) fusermount -u "$mountDIR";;
		unknown) echo "=> $FUNCNAME : ERROR : This filesystem is of an <unknown> type." >&2; return 3;;
		*) command umount -v "$@" || command umount.udisks2 "$@"  || command umount.udisks "$@" || udisksctl unmount -b $device || udisksctl unmount -b $device -f || { sudo -k $(which umount) -v "$@"; } ;;
	esac
	rcCode=$?
	mountDIR_ROOT="$(echo "$mountDIR" | cut -d/ -f-2)"
	[ "$mountDIR_ROOT" = /mnt ] || [ "$mountDIR_ROOT" = /media  ] && echo "=> ls $(dirname "$mountDIR") :" && ls $(dirname "$mountDIR")
	set +x
	return $rcCode
}
function umountISO {
	if [ $# = 0 ];then
		echo "=> $FUNCNAME mountDir" >&2 
		return 1
	fi
	mountDir="$1"
	fusermount -u "$mountDir"
#	loopBackDevice=$(sudo losetup -a | grep $1 | cut -d: -f1)
#	test -z $loopBackDevice && loopBackDevice=$1
#	udisksctl unmount -b $loopBackDevice
#	udisksctl loop-delete -b $loopBackDevice
}
function watchProcess {
	local pidList=""
	local ps=$(which ps)
	mkdir -p ~/log
	test $# = 1 && while true
	do
		pidList=$(\pgrep -f "$1")
		ppidList=$($ps -o ppid= $pidList && echo)
		test -n "$pidList" && ( $ps -fp $pidList && test -n "$ppidList" && echo "=> Showing the parent process :" && $ps h -fp $ppidList ) | tee -a ~/log/processSPY.log && break
		sleep 0.01
	done
}
function wifi5GHzCapable {
	local true_OR_false=false
	local wifiPhysicalDevice=$(\ls /sys/class/ieee80211 | head -1)
	if [ -n "$wifiPhysicalDevice" ] && which iw >/dev/null 2>&1;then
		iw phy $wifiPhysicalDevice info | \egrep -q '5[0-9]{3} MHz' && true_OR_false=true || true_OR_false=false
	elif which iwlist >/dev/null 2>&1;then
		iwlist $wiFiInterface frequency 2>&1 | grep "no frequency information" || iwlist $wiFiInterface frequency | \grep -q '5\..* GHz' && true_OR_false=true || true_OR_false=false
	fi
	echo $true_OR_false
	$true_OR_false
}
function wifiCapabilities {
	export LANG=C
	local wifiPhysicalDevice=$(\ls /sys/class/ieee80211 | head -1)
	local wiFiInterface
	if [ $osFamily = Darwin ]
	then
		echo "=> Darwin/macOS operating systems are not supported yet." >&2
		return 1
	fi

	wiFiInterface=$(lswiFiInterfaces | head -1)
	[ -z "$wiFiInterface" ] && {
		set +x
		echo "=> ERROR : Could not find any wireless network card." >&2
		return 1
	}

	[ -n "$wifiPhysicalDevice" ] && which iw >/dev/null 2>&1 && echo "=> Wifi physical device capabilities :" && iw phy $wifiPhysicalDevice info | more

	if which iwlist >/dev/null 2>&1;then
		echo "========================================================================"
		iwlist $wiFiInterface bitrate || sudo iwlist $wiFiInterface bitrate
		iwlist $wiFiInterface encryption || sudo iwlist $wiFiInterface encryption
		iwlist $wiFiInterface frequency
		iwlist $wiFiInterface event
		iwlist $wiFiInterface retry
	fi | more
}
function wifiInfos {
	export LANG=C
	local wiFiInterface

	if [ $osFamily = Darwin ]
	then
		echo "=> Darwin/macOS operating systems are not supported yet." >&2
		return 1
	fi

	wiFiInterface=$(lswiFiInterfaces | head -1)
	[ -z "$wiFiInterface" ] && {
		echo "=> ERROR : Could not find any wireless network card." >&2
		return 1
	}

	if iw dev 2>/dev/null | grep -q Interface;then
		echo "=> Connected Wifi information :"
		iw dev $wiFiInterface info

		echo "=> Station information :"
		iw dev $wiFiInterface station dump

		echo "=> Wifi networks list :"
		wifiList 2>&1

		echo "=> Connected network link status :"
		iw dev $wiFiInterface link || sudo iw dev $wiFiInterface link
	fi | more

	if which iwlist >/dev/null 2>&1;then
		echo "========================================================================"
		iwlist $wiFiInterface bitrate
		iwlist $wiFiInterface encryption
		test "$1" = "-v" && iwlist $wiFiInterface scan | more
	fi | more
}
function wifiList {
	local wiFiInterface=$(lswiFiInterfaces | head -1)
	if [ -n "$wiFiInterface" ]; then
		if which nmcli >/dev/null; then
			nmcliVersion=$(nmcli -v | awk -F"[. ]" '/version/{printf"%d.%d%02d\n", $4, $5, $6}')
			echo "=> Rescanning WiFi networks ..."
			\nmcli dev wifi rescan && sleep 2
			\nmcli -f ssid,bssid,mode,freq,rate,signal,security,active dev wifi list | \grep 'SSID' >&2 # Print nmcli headers
			\nmcli -f ssid,bssid,mode,freq,rate,signal,security,active dev wifi list | grep -v 'SSID' 
		elif iw dev 2>/dev/null | grep -q Interface;then
			sudo iw dev $wiFiInterface scan | \grep SSID
		elif which iwlist >/dev/null 2>&1; then
			sudo iwlist $wiFiInterface scan | \grep SSID
		fi
	fi
}
function wifiRestart {
	local -r timer=7s
	if ! env | grep SSH_CONNECTION=;then
		\nmcli nm wifi off 2>/dev/null || \nmcli radio wifi off
		\nmcli nm wifi on  2>/dev/null || \nmcli radio wifi on
		echo "=> Waiting $timer for Wi-Fi to connect back again ..."
		sleep $timer
		printf "=> WANIP: "
		\curl -sA "" ipinfo.io/ip 2>/dev/null || \wget -qU "" -O- ipinfo.io/ip
	fi
}

set +x
test "$debug" -gt 0 && echo "=> END of $bold${colors[blue]}$(basename ${BASH_SOURCE[0]})$normal"
