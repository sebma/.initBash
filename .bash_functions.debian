# vim: set ft=sh noet:
! declare 2>&1 | grep -wq ^colors= && [ $BASH_VERSINFO -ge 4 ] && source $initDir/.colors
test "$debug" -gt 0 && echo "=> Running $bold${colors[blue]}$(basename ${BASH_SOURCE[0]})$normal ..."

export apt=$(which apt)

trap 'rc=130;set +x;echo "=> $FUNCNAME: CTRL+C Interruption trapped.">&2;return $rc' INT
function addAptKeys {
	for key
	do
		sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys $key
	done
	move_Extra_Keys_To_Main_APT_KeyRing
}
function apt {
	local args=("$@")
	local firstArg=$1
	local aptGet=$(which apt-get)
	case $firstArg in
		install|remove|purge|upgrade|dist-upgrade|full-upgrade)
			if [ -n "$SSH_CONNECTION" ] && which screen >/dev/null 2>&1;then
				sudo screen -L $apt "${args[@]}" -V
			else
				sudo $apt "${args[@]}" -V
			fi
			;;
		autoremove)
			if [ -n "$SSH_CONNECTION" ] && which screen >/dev/null 2>&1;then
				sudo screen -L $apt autoremove -V || sudo screen -L $aptGet autoremove -V
			else
				sudo $apt autoremove -V || sudo $aptGet autoremove -V
			fi
			;;
		*)
			$apt "${args[@]}";;
	esac
}
function apt-cache {
	local args=("$@")
	local firstArg=$1
	local aptCache="$(which apt-cache)"
	case $firstArg in
		search)
			$aptCache "${args[@]}" | sort;;
		*)
			$aptCache "${args[@]}";;
	esac
}
function aptCachePolicy2LaunchpadPPAURLs {
	local pkg=""
	for pkg
	do
		apt-cache policy $pkg | awk '/launchpad.net/{print$2}' | awk -v pkg=$pkg -F/ 'BEGIN{OFS=FS}{printf pkg" ppa:"$4"/"$5" ";sub("ppa.","",$3);$4="~"$4"/+archive";tmp=$5;$5=$6;$6=tmp;print}'
	done | uniq | column -t
}
function aptGet {
	local args=("$@")
	local firstArg=$1
	case $firstArg in
		install|remove|autoremove|purge) sudo $apt "${args[@]}" -V;;
		download) command apt-get "${args[@]}" --print-uris && $(which apt-get) "${args[@]}";;
		*) command apt-get "${args[@]}";;
	esac
}
function aptPrintURIS {
	local aptGet="command apt-get"
	for apt
	do
		$aptGet download --print-uris "$apt"
	done
}
function apt_cache {
	local apt_cache="command apt-cache"
	firstArg=$1
	if [ "$firstArg" = search ]
	then
		$apt_cache $@ | sort -u
	else
		$apt_cache $@
	fi
}
function aptitude {
	local args=("$@")
	firstArg=$1
	case $firstArg in
		install|reinstall|purge|remove) sudo $(which aptitude) "${args[@]}" -V;;
		*) command aptitude "${args[@]}";;
	esac
}
function deblocate {
	dlocate $(printf "bin/%s$ " "$@")
}
function debEditDependencies {
	test $# = 0 && {
		echo "=> Usage: $FUNCNAME debianPackageFileName" >&2
		return 1
	}

	local pkg=$1
	local newPackage=${pkg/.deb/_NEW.deb}
	local tmp=tmp
	local dpkg_deb="command dpkg-deb"
	$dpkg_deb -x $pkg $tmp/
	$dpkg_deb --control $pkg $tmp/DEBIAN
	$EDITOR $tmp/DEBIAN/control
	dpkg -l gdebi | grep -q ^.i || sudo apt install -Vy gdebi
	dpkg -l $pkg  | grep -q ^.i || $dpkg_deb -b $tmp/ $newPackage && echo "=> Installing \"$pkg\" and its dependencies ..." && sudo gdebi $newPackage
	rm -fr $tmp/
}
function downgradePPA_Package {
	which ppa-purge >/dev/null || sudo apt install -V ppa-purge -y
	local ppa=""
	for pkg
	do
		ppa=$(command apt-cache policy $pkg | awk '/launchpad.net/{print$2}' | awk -F/ '{print"ppa:"$4"/"$5}')
		if [ -n "$ppa" ];then
			echo "=> Downgrading <$pkg> by removing the launchpad <$ppa> repository ..." >&2
			sudo ppa-purge $ppa
		fi
	done
}
function downgradePackages {
	local packageList
	for package
	do
		previousVersion=$(command apt-cache policy $package | awk '!/http:/{version=$1}/ubuntu.com\/ubuntu/{print version;exit;}')
		test -z "$previousVersion" && echo "E: Version '' for '$package' was not found" >&2 || packageList="$packageList $package=$previousVersion"
	done
set -x
	sudo $apt install -V $packageList
set +x
}
function downgradeTo {
	distribCodename=$1
	case $distribCodename in
		"-h"|"")
			echo "=> ERROR: Usage: $FUNCNAME [ <distribCodename> ] | downgrade current" >&2
			return -1
		;;
		"current")
			distribCodename=$(lsb_release -sc)
		;;
		*) #Ajouter une commande pour tester si le nom donne existe
		;;
	esac
	echo "=> distribCodename = $distribCodename"
	sudo sed -i".$(date +%Y%m%d)" "s/$(lsb_release -sc)/$distribCodename/" /etc/apt/sources.list
	if test -s /etc/apt/preferences.d/99-downgrade
	then
		time sudo $apt update
		sudo $apt dist-upgrade -V
	else
		echo "=> ERROR: The file </etc/apt/preferences.d/99-downgrade> does not exist, generating it ..." >&2 && {
			cat <<-EOF
			Package: *
			Pin: release a=$distribCodename
			Pin-Priority: 1001

			Package: *
			Pin: release a=$distribCodename-updates
			Pin-Priority: 1001

			Package: *
			Pin: release a=$distribCodename-security
			Pin-Priority: 1001

			Package: *
			Pin: release a=$distribCodename-backports
			Pin-Priority: 1001

			Package: *
			Pin: release a=$distribCodename-proposed
			Pin-Priority: -1
EOF
		} | sudo tee /etc/apt/preferences.d/99-downgrade
		echo "=> Please re-run the <downgrade> function." >&2
		return 1
	fi
}
function fixAptKeys {
	LANG=C apt-key list | awk -F"/| *" '/expired/{print"sudo apt-key del "$3}' | sh -x
	time (sudo apt-get update 2>/tmp/keymissing; cat /tmp/keymissing)
	for key in $(awk '/Release:.*not available: NO_PUBKEY/{print substr($NF,9)}' /tmp/keymissing | sort -u)
	do
		echo
		echo "=> Processing key: $key"
		sudo apt-key del $key
		sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys $key
	done

	for keyFile in $(awk '/gpg: keyblock resource .*resource limit/{print gensub("\`|.:","","g",$4)" "}' /tmp/keymissing)
	do
		sudo rm -v $keyFile
	done
	\rm -v /tmp/keymissing
}
function isInstalled {
	test $1 && dpkg -l $1 | grep -q ^.i
}
function listFiles2LaunchpadPPAURLs {
	local listFile=""
	for listFile
	do
		sed -n "s/^# //;/deb /p" $listFile | awk '/launchpad.net/{print$2}' | awk -v listFile=$listFile -F/ 'BEGIN{OFS=FS}{printf listFile" ppa:"$4"/"$5" ";sub("ppa.","",$3);$4="~"$4"/+archive";tmp=$5;$5=$6;$6=tmp;print}'
	done | uniq | column -t
}
function listPackagesFromRepo {
	local architecture=$(dpkg-architecture -q DEB_HOST_ARCH 2>/dev/null || dpkg-architecture | awk -F"=" '/DEB_HOST_ARCH\>/{print$2}')
	local repo=undefined_yet

	if [ $# != 1 ];then
		echo "=> Usage : $FUNCNAME repo" >&2
		return 1
	else
		repo="${1/ppa:/}"
		repo="${repo/\//_}"
	fi

	aptitude search -F '%p' "?origin($repo) ( ?architecture($architecture) | ?architecture(all) ) ?installed" || \grep -h -P -o "^Package: \K.*" /var/lib/apt/lists/*$repo*_*Packages | sort -u || grep-dctrl -n -sPackage . /var/lib/apt/lists/*$repo*_*Packages | sort -u
}
function move_Extra_Keys_To_Main_APT_KeyRing {
	apt-key list 2>&1 >/dev/null | awk -F"[\`']" '/resource limit/{print "sudo apt-key add "$2"; sudo \\rm -vf "$2}' | sh -x
}
function reinstallOrignialPackages {
	local packagesList=$@
	local distribName=$(\lsb_release -si)
	distribName=${distribName,} # Converts 1st letter to lower case cf. man bash | grep -m1 -B4 -A10 ,,
	local distribCodeName=$(\lsb_release -sc)

#	test $# != 0 && sudo $apt install -V $(printf "%s/$(lsb_release -sc) " $packagesList)
	for pkg
	do
		version=$(apt-cache policy $pkg| \sed -zr 's/[*]{3}/   /g;s/([0-9]+)\n/\1 /g' | awk "/ppa|:$/{next}/[0-9]+\..*https?:.*$distribName.*$distribCodeName/"'{printf$1;exit}')
		sudo $apt install -V $pkg=$version
	done
}
function removePackages {
	#echo "=> regexp = $regexp" >&2
	local regexp=$1
	shift
	case $regexp in
	""|.) echo "=> Usage: $FUNCNAME non-empty-regexp" >&2;return 1;;
	esac
	local packagesToBeRemoved=$(dpkg -l | awk "/^.i +.*$regexp/"'{printf $2" "}')
	test -n "$packagesToBeRemoved" && sudo apt purge -V $packagesToBeRemoved
}
function updateRepositoryKeys {
	time sudo apt-get update 2>&1 >/dev/null | awk '/Release:.*not available: NO_PUBKEY/{print "sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys "$NF}' | sh -x
	sudo apt-key update
}
function website {
	for pkg
	do
		printf "Package: $pkg\t"
		command apt-cache show $pkg | grep "Homepage:" | uniq
	done
}

trap - INT
set +x
test "$debug" -gt 0 && echo "=> END of $bold${colors[blue]}$(basename ${BASH_SOURCE[0]})$normal"
