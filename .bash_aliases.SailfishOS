#!sh
declare -A | grep -wq colors || source $initDir/.colors
test "$debug" -gt 0 && echo "=> Running $bold${colors[blue]}$(basename ${BASH_SOURCE[0]})$normal ..."

findExcludedPathList="./proc ./sys ./dev ./media ./opt/alien ./home/$USER/android_storage"
prunePathsFindExpression=$(printf -- "-path %s -prune -o " $findExcludedPathList)
duExcludedPathList="./proc ./sys ./dev ./opt/alien"
excludePathsDuExpression=$(printf -- "--exclude %s " $duExcludedPathList)

alias androidVersion="\grep version.release /opt/alien/system/build.prop"
alias getIMEI="ssu status | awk '/UID/{print\$NF}'"
alias imei="ssu status | awk '/UID/{print\$NF}'"
alias la='ls -A'
alias notesGrep='sqlite3 ~/.local/share/jolla-notes/QML/OfflineStorage/Databases/8b63c31a7656301b3f7bcbbfef8a2b6f.sqlite "select body from notes;" | grep'
alias notesSearch=notesGrep
alias model='ssu status | awk -F "[ )]" /model/'\''{print$(NF-4)" "$(NF-1)}'\'''
#groups | egrep -wq "admin|sudo" && alias pipInstall="curl -fsSL https://bootstrap.pypa.io/get-pip.py | sudo -H python"  || alias pipInstall="curl -fsSL https://bootstrap.pypa.io/get-pip.py | python"
#groups | egrep -wq "admin|sudo" && alias pip3Install="curl -fsSL https://bootstrap.pypa.io/get-pip.py | sudo -H python3" || alias pip3Install="curl -fsSL https://bootstrap.pypa.io/get-pip.py | python3"
alias os=version
groups | egrep -wq "admin|sudo" && alias pipInstall="sudo -H easy_install pip"  || alias pipInstall="easy_install --user pip"
groups | egrep -wq "admin|sudo" && alias pipInstall="sudo -H easy_install3 pip" || alias pipInstall="easy_install3 --user pip"
alias refresh="time sudo pkcon refresh"
alias refresh2="time sudo zypper refresh"
alias sed='\sed -r'
alias smsGrep='sqlite3 ~/.local/share/commhistory/commhistory.db "select Freetext from Events where type=2;" | grep'
alias smsSearch=smsGrep
alias topf10='$(which find) . $prunePathsFindExpression -xdev -type f -size +10M -exec ls -l --block-size=M --time-style=+"%Y-%m-%d %T" {} \; 2>/dev/null | sort -nrk5 | column -t | head -10 | awk '\''{total+=$5;print}END{print"=> total = "total" MiB"}'\'''
alias topf50='$(which find) . $prunePathsFindExpression -xdev -type f -size +10M -exec ls -l --block-size=M --time-style=+"%Y-%m-%d %T" {} \; 2>/dev/null | sort -nrk5 | column -t | head -50 | awk '\''{total+=$5;print}END{print"=> total = "total" MiB"}'\'''
alias topf5='$(which find) . $prunePathsFindExpression -xdev -type f -size +10M -exec ls -l --block-size=M --time-style=+"%Y-%m-%d %T" {} \; 2>/dev/null | sort -nrk5 |  column -t | head -5 | awk '\''{total+=$5;print}END{print"=> total = "total" MiB"}'\'''
alias topf='$(which find) . $prunePathsFindExpression -xdev -type f -size +10M -exec ls -l --block-size=M --time-style=+"%Y-%m-%d %T" {} \; 2>/dev/null | sort -nrk5 | column -t | head -n | awk '\''{total+=$5;print}END{print"=> total = "total" MiB"}'\'''
#alias topflines='$(which find) . $prunePathsFindExpression -xdev -type f -size +10M -exec ls -l --block-size=M --time-style=+"%Y-%m-%d %T" {} \; 2>/dev/null | sort -nrk5 | column -t | head -n $(($LINES-4)) | awk '\''{total+=$5;print}END{print"=> total = "total" MiB"}'\'''
function rebalance {
	which btrfs-balancer && {
		df /
		echo
		sudo systemctl stop aliendalvik.service 
		for i in $(seq 5)
		do
			printf "=> Balancing #%2d\n" $i
			sudo btrfs-balancer allocation
			echo
			time sudo btrfs-balancer balance || break
			echo
			sync
			sleep 3
			sudo btrfs-balancer allocation
		done
		echo
		df /
		sudo systemctl start aliendalvik.service
	}
}
function sailFishOSUpgrade {
	test $1 && {
		local currentRelease=$(version | awk '{print$2}')
		local nextRelease=$1
		local logFile=~/log/sailFishOSUpgrade_${currentRelease}_upto_$nextRelease.log

		mkdir -p ~/log
		test $nextRelease = $currentRelease && {
			echo "=> The current release is already $currentRelease." >&2
			return 2
		}
		{
			echo "=> Disabling the openrepos repositories ..." >&2
			ssu repos | awk '/openrepos/{print $2}' | \xargs -rtl ssu disablerepo
			echo "=> DONE." >&2
			set -x
			ssu status
			ssu release
			version --dup
			version --verify
		} 2>&1 | tee -a $logFile
		set +x
		return
	} || {
		echo "=> Usage: $FUNCNAME nextRelease" >&2
		return 1
	}
}
function topflines {
	$(which find) "$@" $prunePathsFindExpression -xdev -type f -size +10M -exec ls -l --block-size=M --time-style=+"%Y-%m-%d %T" {} \; 2>/dev/null | sort -nrk5 | column -t | head -n $(($LINES-4)) | awk '{total+=$5;print}END{if(total) print"=> total = "total" MiB"}'
}

set +x
test "$debug" -gt 0 && echo "=> END of $bold${colors[blue]}$(basename ${BASH_SOURCE[0]})$normal"
