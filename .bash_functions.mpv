# vim: set syn=sh noet:

os=$(uname -s)
mpvnoconfig="mpv --no-config"
mpv="$(which mpv)"
mplayer="$(which mplayer)"
alias mpvnoconfig="$mpvnoconfig"
alias mpvh="mpv --profile=hid"
alias mpvid="mpv --profile=identify"

export mpv_Output_Perl_Script="'\$| = 1;s/\n/\r/g if \$_ =~ /AV: /;s/Saving state/\nSaving state/'"

FHD_Format="bestvideo[height<=?1080]+bestaudio[acodec=opus]/bestvideo[height<=?1080]+m4a/bestvideo+bestaudio/best"
HD_Format="bestvideo[height<=?720]+bestaudio[acodec=opus]/bestvideo[height<=?720]+m4a/bestvideo+bestaudio/hd/best"
FSD_Format="bestvideo[height<=?480]+bestaudio[acodec=opus]/bestvideo[height<=?480]+m4a/bestvideo+bestaudio/sd/best"
SD_Format="bestvideo[height<=?360]+bestaudio[acodec=opus]/bestvideo[height<=?360]+m4a/bestvideo+bestaudio/sd/best"
LD_Format="bestvideo[height<=?240]+bestaudio[acodec=opus]/bestvideo[height<=?240]+m4a/bestvideo+bestaudio/low/best"
VLD_Format="bestvideo[height<=?144]+bestaudio[acodec=opus]/bestvideo[height<=?144]+m4a/bestvideo+bestaudio/low/best"

alias mpvBEST='mpvFORMAT best'
alias mpvFHD='mpvFORMAT "$FHD_Format"'
alias mpvHD='mpvFORMAT "$HD_Format"'
alias mpvFSD='mpvFORMAT "$FSD_Format"'
alias mpvSD='mpvFORMAT "$SD_Format"'
alias mpvLD='mpvFORMAT "$LD_Format"'
alias mpvVLD='mpvFORMAT "$VLD_Format"'

alias mpvplaylistBEST='mpvplaylistFORMAT best'
alias mpvplaylistFHD='mpvplaylistFORMAT "$FHD_Format"'
alias mpvplaylistHD='mpvplaylistFORMAT "$HD_Format"'
alias mpvplaylistFSD='mpvplaylistFORMAT "$FSD_Format"'
alias mpvplaylistSD='mpvplaylistFORMAT "$SD_Format"'
alias mpvplaylistLD='mpvplaylistFORMAT "$LD_Format"'
alias mpvplaylistVLD='mpvplaylistFORMAT "$VLD_Format"'

alias mpvFrench="mpv --profile=french"
alias mpvEnglish="mpv --profile=english"
alias mpvGerman="mpv --alang=deu --slang=deu"
alias mpvSpanish="mpv --alang=spa --slang=spa"

function mpvOld {
	which mpv $($youtube_dl -g "$@")
}
function mpvalt {
	test $1 && command mpv --no-ytdl $($youtube_dl -gf best $@ | uniq)
}
function urlplayer {
	mpv $($youtube_dl -gf best "$1")
}
function mpvInit {
	if [ -c /dev/fb0 ]; then
		if [ ! -w /dev/fb0 ]
		then
			\sudo chmod g+w /dev/fb0
			if ! groups | \grep -wq video 
			then
				echo "=> INFO: Adding $USER in the video group and logging in to the new <video> group." 1>&2 
				\sudo adduser $USER video
				\sudo newgrp - video
			fi
		fi
	else
		echo "=> Function $FUNCNAME - ERROR: Framebuffer is not supported in this configuration." 1>&2
		return 1
	fi
}
function mpv {
	$mpv >/dev/null && {
	if [ $os = Linux ]
		then
			if tty | \egrep -q "/dev/(pts/|ttys)[0-9]+"
			then # Si on est dans une fenetre de terminal
				LANG=en_US $mpv "$@"
			elif [ -c /dev/fb0 ]; then
				echo "=> INFO: You are in a console terminal, therefore framebuffering will be used." 1>&2
				LANG=en_US $mpv -vo drm "$@"
			elif LANG=C tty | \grep "not a tty" 1>&2 ; then
				return 1
			else
				echo "=> Function $FUNCNAME - ERROR: Framebuffer is not supported in this configuration." 1>&2
				return 2
			fi
		elif [ $os = Darwin ]
		then
			LANG=en_US $mpv "$@"
		fi
	}
}
function mplayer {
	$mplayer >/dev/null && {
	if [ $os = Linux ]
		then
			if tty | \egrep -q "/dev/(pts/|ttys)[0-9]+"
			then # Si on est dans une fenetre de terminal
				LANG=en_US $mplayer "$@"
			elif [ -c /dev/fb0 ]; then
				echo "=> INFO: You are in a console terminal, therefore framebuffering will be used." 1>&2
				LANG=en_US $mplayer -vo fbdev2 "$@"
			elif LANG=C tty | \grep "not a tty" 1>&2 ; then
				return 1
			else
				echo "=> Function $FUNCNAME - ERROR: Framebuffer is not supported in this configuration." 1>&2
				return 2
			fi | egrep "stream |dump|Track |VIDEO:|AUDIO:|VO:|AO:|A:"
		elif [ $os = Darwin ]
		then
			LANG=en_US $mplayer "$@"
		fi
	}
}
function mpvFORMAT {
	\rm nohup.out
	touch nohup.out
	nohup $mpv --ytdl-format "$@" &
	tail -f nohup.out | egrep -v "AV: "
}
function mpvdirectly {
	\rm nohup.out
	touch nohup.out
	nohup $mpv --no-ytdl "$@" &
	tail -f nohup.out | egrep -v "AV: "
}
function mpvlive {
	\rm nohup.out
	touch nohup.out
	nohup $mpv --no-resume-playback "$@" &
	tail -f nohup.out | egrep -v "AV: "
}
function mpvlocal {
	mpvdirectly "$@"
}
function mpvplaylist {
	\rm nohup.out
	touch nohup.out
	nohup $mpv --playlist "$@" &
	tail -f nohup.out | egrep -v "AV: "
}
function mpvplaylistFORMAT {
	\rm nohup.out
	touch nohup.out
	local format="$1"
	shift
	nohup $mpv --ytdl-format "$format" --playlist "$@" &
	tail -f nohup.out | egrep -v "AV: "
}
